{
  "hash": "62babdafe85324065207eaf8200f4b14",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidy Data and Visualization (Hands-on Session)\"\ndate: \"2024-08-14\"\n---\n\n\n\n\n\n::: {.callout-warning}\n\n#### STOP: Super important warning!\n\n> If you didn't complete the **summer assignments**, you should definitely make time to do complete the following primers. The original content is coming from RStudio and was adapted by Prof. Andrew Heiss.\n\nFor the first part of this week's lesson, you need to work through a few of Posit's introductory primers. You'll do these in your browser, where you can type code and see results immediately.\n\nYou'll learn some of the basics of R, as well as some powerful methods for manipulating data with the {dplyr} package.\n\nComplete these primers. It may seem like there are a lot, but they're short and go fairly quickly, especially as you get the hang of the syntax. Also, **I have no way of seeing what you do or what you get wrong or right**, and that's totally fine! If you get stuck or want to skip some (or if it gets too easy), feel free to move on!\n\n- **The Basics**\n    - [Visualization basics](https://r-primers.andrewheiss.com/basics/01-visualization-basics/)\n    - [Programming basics](https://r-primers.andrewheiss.com/basics/02-programming-basics/)\n- **Work with Data**\n    - [Working with tibbles](https://r-primers.andrewheiss.com/transform-data/01-tibbles/)\n    - [Isolating data with {dplyr}](https://r-primers.andrewheiss.com/transform-data/02-isolating/)\n    - [Deriving information with {dplyr}](https://r-primers.andrewheiss.com/transform-data/03-deriving/)\n\nThe content from these primers comes from the (free and online!) book [*R for Data Science* by Garrett Grolemund and Hadley Wickham](https://r4ds.hadley.nz/). I highly recommend the book as a reference and for continuing to learn and use R in the future (like running regression models and other types of statistical analysis).\n\n:::\n\n## Introduction\n\nIn this hands-on session, we will explore the relationship between various state-level characteristics and the share of votes received by Donald Trump in the 2016 presidential election. We will build a visualization step by step, using the `ggplot2` package in R. Throughout this session, you'll learn how to manipulate data, create plots, and progressively add layers to enhance your visualizations.\n\n## Note on the Data\n\nThe dataset we'll be using contains various economic and demographic indicators for U.S. states during the 2016 presidential election. It includes information such as the percentage of the population that completed college (`percoled`), the share of votes received by Donald Trump (`trumpshare`), whether Trump won the state (`trumpw`), and more. Understanding the context of these variables will help you interpret the plots we create.\n\n# Overview of Functions to Be Used\n\nWe'll use the following functions in our session:\n\n- `ggplot()`: Initializes a ggplot object that stores data and aesthetic mappings.\n- `aes()`: Defines aesthetic mappings such as x and y axes, color, size, etc.\n- `geom_point()`: Adds points to the plot, commonly used for scatter plots.\n- `geom_smooth()`: Adds a smoothed conditional mean, often used to visualize trends.\n- `geom_hline()`: Adds a horizontal line across the plot, useful for reference lines.\n- `geom_text()`: Adds text labels to points in the plot.\n- `scale_x_continuous()` and `scale_y_continuous()`: Adjust the scales of the axes.\n- `scale_color_manual()`: Manually adjusts the color scale used in the plot.\n- `coord_cartesian()`: Limits the plot display area without changing the data.\n- `facet_wrap()`: Creates separate plots (facets) for subsets of data.\n- `labs()`: Adds labels to the axes, title, and other plot elements.\n- `theme_minimal()`: Applies a minimal theme to the plot for a clean look.\n\n## Data Preparation\n\n### Load Packages\n\nWe'll begin by loading the necessary packages that will help us manipulate the data and create visualizations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the necessary packages for data manipulation and visualization.\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(hrbrthemes)\n```\n:::\n\n\n\n### Load the Data\n\nNext, we'll load the election dataset, which contains information about state-level turnout and various economic indicators during the 2016 presidential election.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the election dataset.\nelection <- read_csv(\"../files/data/external_data/election_turnout.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 51 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): state, region, division\ndbl (12): rownames, year, turnoutho, perhsed, percoled, gdppercap, ss, trump...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n### Inspect the Data\n\nIt's always important to inspect your data before starting any analysis. This helps you understand the structure of the data and the types of variables you're working with.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use glimpse() to get a quick overview of the dataset.\nelection |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 51\nColumns: 15\n$ rownames    <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,…\n$ year        <dbl> 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016…\n$ state       <chr> \"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\", …\n$ region      <chr> \"South\", \"West\", \"West\", \"South\", \"West\", \"West\", \"Northea…\n$ division    <chr> \"East South Central\", \"Pacific\", \"Mountain\", \"West South C…\n$ turnoutho   <dbl> 59.0, 61.3, 55.0, 52.8, 56.7, 70.1, 65.2, 64.4, 60.9, 64.6…\n$ perhsed     <dbl> 84.3, 92.1, 86.0, 84.8, 81.8, 90.7, 89.9, 88.4, 89.3, 86.9…\n$ percoled    <dbl> 23.5, 28.0, 27.5, 21.1, 31.4, 38.1, 37.6, 30.0, 54.6, 27.3…\n$ gdppercap   <dbl> 42663, 81801, 43269, 41129, 61924, 58009, 72331, 69930, 18…\n$ ss          <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0…\n$ trumpw      <dbl> 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0…\n$ trumpshare  <dbl> 0.62083092, 0.51281512, 0.48671616, 0.60574102, 0.31617107…\n$ sunempr     <dbl> 5.8, 6.9, 5.2, 3.8, 5.4, 2.9, 4.9, 4.5, 6.0, 4.7, 5.3, 2.8…\n$ sunempr12md <dbl> -0.2, 0.3, -0.6, -0.6, -0.3, -0.6, -0.7, -0.2, -0.5, -0.4,…\n$ gdp         <dbl> 203829.8, 49363.4, 311091.0, 120374.8, 2657797.6, 329368.3…\n```\n\n\n:::\n:::\n\n\n\n## Exercise 1: Basic Scatter Plot\n\n### Objective\n\nIn this exercise, we aim to create a basic scatter plot that visualizes the relationship between the share of the vote Trump received (`trumpshare`) and the percentage of the state that completed college (`percoled`). This is a straightforward way to explore potential correlations between education levels and voting behavior.\n\n### Instructions\n\nUse the `ggplot()` function to initialize the plot, mapping `percoled` to the x-axis and `trumpshare` to the y-axis. Then, add points to the plot using `geom_point()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a basic scatter plot.\nelection |> \n  ggplot(\n    aes(\n      x = percoled,    # percoled on the x-axis\n      y = trumpshare   # trumpshare on the y-axis\n    )\n  ) +\n  geom_point() +          # Add points to represent each state\n  labs(\n    title = \"Relationship between Trump Vote Share and College Education\",\n    x = \"Percentage with College Education\",\n    y = \"Trump Vote Share\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](02-handson_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n### Explanation\n\nIn this plot, each point represents a state, with the x-axis showing the percentage of the population with a college education and the y-axis showing the percentage of votes Trump received. This basic plot will help us identify any apparent trends or outliers.\n\n## Exercise 2: Data Transformation\n\n### Objective\n\nBefore enhancing our plot, we'll transform some variables to better suit our analysis. Specifically, we'll convert `trumpw` into a categorical variable (factor) and rescale `percoled` to represent it as a proportion (dividing by 100).\n\n### Instructions\n\nUse the `mutate()` function to transform the data and then create a scatter plot with the transformed variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform the data.\nelection_transformed <- election |> \n  mutate(\n    trumpw = as_factor(trumpw),  # Convert trumpw to a factor\n    percoled = percoled / 100    # Rescale percoled to be a proportion\n  )\n\n# Plot using the transformed data.\nelection_transformed |> \n  ggplot(\n    aes(\n      x = percoled,\n      y = trumpshare\n    )\n  ) +\n  geom_point() +\n  labs(\n    title = \"Trump Vote Share vs. College Education (Transformed Data)\",\n    x = \"Percentage with College Education\",\n    y = \"Trump Vote Share\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](02-handson_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n### Explanation\n\nBy converting `trumpw` to a factor, we make it easier to group the data by whether Trump won a state. Rescaling `percoled` to a proportion standardizes the variable, allowing for more intuitive interpretation, especially when we apply formatting later on.\n\n## Exercise 3: Filtering Data\n\n### Objective\n\nIn this exercise, we'll filter out the District of Columbia from our dataset. D.C. is often an outlier in many analyses due to its unique characteristics, so excluding it can make patterns in the rest of the data clearer.\n\n### Instructions\n\nUse the `filter()` function to remove D.C. from the dataset, then create a scatter plot with the filtered data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the data.\nelection_filtered <- election_transformed |> \n  filter(state != \"District of Columbia\")\n\n# Plot the filtered data.\nelection_filtered |> \n  ggplot(\n    aes(\n      x = percoled,\n      y = trumpshare\n    )\n  ) +\n  geom_point() +\n  labs(\n    title = \"Trump Vote Share vs. College Education (Filtered Data)\",\n    x = \"Percentage with College Education\",\n    y = \"Trump Vote Share\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](02-handson_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### Explanation\n\nRemoving D.C. reduces the potential for this outlier to skew the visual representation of the data, allowing for a more accurate depiction of the relationship between education levels and Trump’s vote share in the other states.\n\n## Exercise 4: Adding a Regression Line\n\n### Objective\n\nTo better understand the relationship between education and Trump’s vote share, we'll add a linear regression line to our scatter plot. This line will help us see the overall trend in the data.\n\n### Instructions\n\nUse `geom_smooth()` with the `method = \"lm\"` argument to add a linear regression line to your scatter plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a linear regression line to the plot.\nelection_filtered |> \n  ggplot(\n    aes(\n     \n\n x = percoled,\n      y = trumpshare\n    )\n  ) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"black\", se = FALSE) +       # Add a linear regression line\n  labs(\n    title = \"Trump Vote Share vs. College Education with Regression Line\",\n    x = \"Percentage with College Education\",\n    y = \"Trump Vote Share\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-handson_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n### Explanation\n\nThe regression line provides a clear visual summary of the direction and strength of the relationship between the percentage of college-educated individuals and Trump’s vote share. The slope of the line will indicate whether there's a positive or negative correlation.\n\n## Exercise 5: Adding a Horizontal Reference Line\n\n### Objective\n\nIn this exercise, we'll add a horizontal reference line at 50% Trump vote share. This line represents a key threshold, indicating whether Trump received more or less than half of the votes in each state.\n\n### Instructions\n\nUse `geom_hline()` to add a horizontal dashed line at `y = 0.5`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a horizontal reference line at 50% Trump vote share.\nelection_filtered |> \n  ggplot(\n    aes(\n      x = percoled,\n      y = trumpshare\n    )\n  ) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"black\", se = FALSE) +\n  geom_hline(yintercept = 0.5, linetype = \"dashed\", color = \"grey\") + # Add horizontal line at 50%\n  labs(\n    title = \"Trump Vote Share vs. College Education with Reference Line\",\n    x = \"Percentage with College Education\",\n    y = \"Trump Vote Share\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-handson_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n### Explanation\n\nThe 50% line is a critical point of reference, as it allows us to quickly see which states Trump won (above the line) and which he lost (below the line). This adds another layer of interpretation to the plot.\n\n## Exercise 6: Adding Text Labels\n\n### Objective\n\nTo make the plot more informative, we'll add text labels to the points. This will allow us to see which state each point represents without having to hover over or refer to another source.\n\n### Instructions\n\nUse `geom_text()` to add state labels to the points on your scatter plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add text labels to the points.\nelection_filtered |> \n  ggplot(\n    aes(\n      x = percoled,\n      y = trumpshare\n    )\n  ) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"black\", se = FALSE) +\n  geom_hline(yintercept = 0.5, linetype = \"dashed\", color = \"grey\") +\n  geom_text(aes(label = state), vjust = -0.5, size = 3, show.legend = FALSE) + # Add text labels\n  labs(\n    title = \"Trump Vote Share vs. College Education with State Labels\",\n    x = \"Percentage with College Education\",\n    y = \"Trump Vote Share\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-handson_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n### Explanation\n\nBy labeling each point with its corresponding state abbreviation, we can easily identify which states exhibit particular voting and education patterns. This is especially useful for recognizing outliers or regional trends.\n\n## Exercise 7: Adjusting Axis Scales\n\n### Objective\n\nTo improve the readability of our plot, we'll adjust the x and y axes to display percentages. We'll also add a custom color scale to differentiate between states that Trump won and those he didn't.\n\n### Instructions\n\nUse `scale_x_continuous()` and `scale_y_continuous()` to format the axes as percentages, and `scale_color_manual()` to define custom colors for the `trumpw` variable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adjust axis scales and color scale.\nelection_filtered |> \n  ggplot(\n    aes(\n      x = percoled,\n      y = trumpshare,\n      color = trumpw    # Color points by whether Trump won the state\n    )\n  ) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"black\", se = FALSE) +\n  geom_hline(yintercept = 0.5, linetype = \"dashed\", color = \"grey\") +\n  geom_text(aes(label = state), vjust = -0.5, size = 3, show.legend = FALSE) +\n  scale_x_continuous(labels = scales::percent) +  # Format x-axis as percentage\n  scale_y_continuous(breaks = seq(0,1,.2), labels = scales::percent) +  # Format y-axis as percentage\n  scale_color_manual(labels = c(\"No\", \"Yes\"), values = c(\"blue\", \"red\")) + # Custom color scale\n  labs(\n    title = \"Trump Vote Share vs. College Education with Adjusted Scales\",\n    x = \"Percentage with College Education\",\n    y = \"Trump Vote Share\",\n    color = \"Did Trump win the State?\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-handson_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n### Explanation\n\nFormatting the axes as percentages makes the data more interpretable for viewers. The custom color scale enhances the plot by visually distinguishing states based on the election outcome, making patterns and trends easier to detect.\n\n## Exercise 8: Adding Facets\n\n### Objective\n\nFinally, we'll use facets to create separate plots for each region. This allows us to compare trends across different parts of the country more effectively.\n\n### Instructions\n\nUse `facet_wrap(~ region)` to create a separate plot for each region.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add facets to create separate plots by region.\nelection_filtered |> \n  ggplot(\n    aes(\n      x = percoled,\n      y = trumpshare,\n      color = trumpw\n    )\n  ) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"black\", se = FALSE) +\n  geom_hline(yintercept = 0.5, linetype = \"dashed\", color = \"grey\") +\n  geom_text(aes(label = state), vjust = -0.5, size = 3, show.legend = FALSE) +\n  scale_x_continuous(labels = scales::percent) +  \n  scale_y_continuous(breaks = seq(0,1,.2), labels = scales::percent) +\n  scale_color_manual(labels = c(\"No\", \"Yes\"), values = c(\"blue\", \"red\")) +\n  coord_cartesian(clip = \"off\") + # Ensure labels are not clipped\n  facet_wrap(~ region) +          # Facet by region\n  labs(\n    title = \"Trump Vote Share vs. College Education by Region\",\n    x = \"Percentage with College Education\",\n    y = \"Trump Vote Share\",\n    color = \"Did Trump win the State?\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-handson_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n### Explanation\n\nFaceting allows us to see how the relationship between education and Trump’s vote share varies across different regions. This can reveal regional differences that might not be apparent when looking at the data as a whole.\n\n## Recap\n\nIn this session, we've progressively built a complex `ggplot2` visualization, starting from a basic scatter plot and adding layers such as regression lines, reference lines, text labels, custom scales, and facets. Each step has added more depth to our understanding of the data, demonstrating the power and flexibility of `ggplot2` for exploring relationships within data.\n",
    "supporting": [
      "02-handson_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}