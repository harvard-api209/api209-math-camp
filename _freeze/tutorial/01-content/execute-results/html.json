{
  "hash": "0095cb4e4198d3463f73d58d86a85d4b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tutorial 1: Introduction to R and Basic Data Types\"\nformat: html\n---\n\n\n\n\n# Introduction to R\n\nR is a powerful programming language widely used for statistical computing and data analysis. In this tutorial, we will cover the basics of R, including how to work with vectors and basic data types. By the end of this tutorial, you will be able to perform simple data operations in R and understand the fundamental data types.\n\n## 1.1 Setting Up R and RStudio\n\nTo begin using R, you'll need to install R and RStudio. RStudio is an integrated development environment (IDE) that makes it easier to write R code.\n\n- **Installing R:** Visit the [CRAN website](https://cran.r-project.org/) to download and install R.\n- **Installing RStudio:** Download and install RStudio from the [RStudio website](https://rstudio.com/).\n\nOnce installed, open RStudio, and you're ready to start coding in R!\n\n## 1.2 Basic Data Types in R\n\nR has several basic data types that you will use frequently:\n\n### 1.2.1 Vectors\n\nVectors are the most basic data structure in R. A vector is a sequence of data elements of the same basic type.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric vector\nscores <- c(85, 90, 76, 88, 92)\n\n# Character vector\nstudents <- c(\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eva\")\n\n# Logical vector\npassed <- c(TRUE, TRUE, FALSE, TRUE, TRUE)\n```\n:::\n\n\n\n\n### 1.2.2 Data Types\n\nR includes several fundamental data types:\n\n- **Numeric:** Used for numbers. E.g., `1`, `3.14`, `42`.\n- **Character:** Used for text strings. E.g., `\"apple\"`, `\"R programming\"`.\n- **Logical:** Used for TRUE or FALSE values. E.g., `TRUE`, `FALSE`.\n- **Factor:** Used for categorical data. E.g., levels like `\"low\"`, `\"medium\"`, `\"high\"`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example of different data types\nage <- 25               # Numeric\nname <- \"Alice\"         # Character\nis_student <- TRUE      # Logical\n```\n:::\n\n\n\n\n## 1.3 Basic Operations with Vectors\n\nYou can perform arithmetic operations on numeric vectors and use indices to subset them.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Arithmetic operations\ntotal_score <- scores + 5  # Adding 5 to each score\n\n# Subsetting vectors\ntop_student <- students[which.max(scores)]  # Finding the student with the highest score\n```\n:::\n\n\n\n\n## Exercises and Solutions\n\n### Exercise 1: Create and Manipulate Vectors\n\n1. Create a numeric vector called `ages` that contains the ages of five students: `18`, `21`, `19`, `22`, `20`.\n2. Subtract 2 from each element in the `ages` vector.\n3. Find the maximum age in the `ages` vector.\n\n**Solution:**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Create the ages vector\nages <- c(18, 21, 19, 22, 20)\n\n# Step 2: Subtract 2 from each element\nadjusted_ages <- ages - 2\n\n# Step 3: Find the maximum age\nmax_age <- max(adjusted_ages)\nmax_age\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20\n```\n\n\n:::\n:::\n\n\n\nExpected output:\n```\n[1] 20\n```\n\n### Exercise 2: Working with Character Vectors\n\n1. Create a character vector called `subjects` that contains the names of three school subjects: `\"Math\"`, `\"History\"`, `\"Biology\"`.\n2. Add a new subject `\"Physics\"` to the `subjects` vector.\n3. Extract the second subject from the `subjects` vector.\n\n**Solution:**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Create the subjects vector\nsubjects <- c(\"Math\", \"History\", \"Biology\")\n\n# Step 2: Add a new subject\nsubjects <- c(subjects, \"Physics\")\n\n# Step 3: Extract the second subject\nsecond_subject <- subjects[2]\nsecond_subject\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"History\"\n```\n\n\n:::\n:::\n\n\n\nExpected output:\n```\n[1] \"History\"\n```\n\n### Exercise 3: Logical Operations\n\n1. Create a logical vector called `attendance` with values `TRUE`, `FALSE`, `TRUE`, `TRUE`, `FALSE`.\n2. Count how many students attended (i.e., how many `TRUE` values there are).\n3. Find out if all students attended by using the `all()` function.\n\n**Solution:**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Create the attendance vector\nattendance <- c(TRUE, FALSE, TRUE, TRUE, FALSE)\n\n# Step 2: Count how many students attended\ncount_attendance <- sum(attendance)\ncount_attendance\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# Step 3: Check if all students attended\nall_attended <- all(attendance)\nall_attended\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n### Exercise 4: Calculating Averages\n\n1. Using the `scores` vector from earlier, calculate the average score of the students.\n2. Determine how many students scored above 80 using the `sum()` function.\n\n**Solution:**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Calculate the average score\naverage_score <- mean(scores)\naverage_score\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 86.2\n```\n\n\n:::\n\n```{.r .cell-code}\n# Step 2: Count how many students scored above 80\nstudents_above_80 <- sum(scores > 80)\nstudents_above_80\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\n### Exercise 5: Creating and Using Factors\n\n1. Create a factor variable `grade_levels` with the levels `\"Freshman\"`, `\"Sophomore\"`, `\"Junior\"`, `\"Senior\"`.\n2. Assign a grade level to each student in the `students` vector.\n3. Display the frequency of each grade level using the `table()` function.\n\n**Solution:**\n\n```r\n# Step 1: Create the grade_levels factor\ngrade_levels <- factor(c(\"Freshman\", \"Sophomore\", \"Junior\", \"Senior\", \"Freshman\"),\n                       levels = c(\"Freshman\", \"Sophomore\", \"Junior\", \"Senior\"))\n\n# Step 2: Assign grade levels to students\nstudents_grade_levels <- data.frame(students, grade_levels)\n\n# Step 3: Display the frequency of each grade level\ngrade_frequency <- table(students_grade_levels$grade_levels)\ngrade_frequency\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}