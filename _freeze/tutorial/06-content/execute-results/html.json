{
  "hash": "461e4ccd64b8fb9ff5f24875860012f9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tutorial 6: Advanced Data Wrangling with Tidyverse\"\nformat: html\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# Advanced Data Wrangling in the Economics of Education\n\nIn this tutorial, we will explore advanced data wrangling techniques using the Tidyverse, with examples related to the economics of education. We will cover tasks such as merging datasets, reshaping data, handling missing values, and analyzing educational data. These techniques will help you efficiently prepare and analyze complex datasets in educational economics research. First, load the `tidyverse` package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n## 6.1 Merging Datasets in Education Research\n\nEducational datasets often come from multiple sources, such as student assessments, school funding records, and demographic surveys. Combining these datasets is a crucial step in analysis.\n\n### 6.1.1 Inner Join: Combining Student Test Scores with School Funding\n\nAn **inner join** merges two datasets, keeping only rows with matching values in both. For instance, you may want to combine student test scores with school funding data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example data frames\ntest_scores_df <- data.frame(\n  StudentID = c(1, 2, 3, 4, 5),\n  Math_Score = c(85, 90, 78, 88, 92),\n  Reading_Score = c(82, 88, 80, 85, 91)\n)\n\nschool_funding_df <- data.frame(\n  SchoolID = c(1, 1, 2, 2, 3),\n  StudentID = c(1, 2, 3, 4, 5),\n  Funding_Per_Student = c(10000, 10000, 8000, 8000, 9000)\n)\n\n# Performing an inner join on StudentID\ncombined_df <- test_scores_df |> inner_join(school_funding_df, by = \"StudentID\")\ncombined_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  StudentID Math_Score Reading_Score SchoolID Funding_Per_Student\n1         1         85            82        1               10000\n2         2         90            88        1               10000\n3         3         78            80        2                8000\n4         4         88            85        2                8000\n5         5         92            91        3                9000\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `inner_join()` merges `test_scores_df` and `school_funding_df` by matching the `StudentID` column. Only students present in both datasets are included in the result.\n\n### 6.1.2 Left Join: Linking Student Performance with Demographics\n\nA **left join** includes all rows from the left dataset (e.g., student performance) and adds matching rows from the right dataset (e.g., demographics). Missing values are filled with `NA`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example data frames\ndemographics_df <- data.frame(\n  StudentID = c(1, 2, 3, 6),\n  Gender = c(\"F\", \"M\", \"F\", \"M\"),\n  SES = c(\"High\", \"Low\", \"Medium\", \"Low\")\n)\n\n# Performing a left join on StudentID\ncombined_left_df <- test_scores_df |> left_join(demographics_df, by = \"StudentID\")\ncombined_left_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  StudentID Math_Score Reading_Score Gender    SES\n1         1         85            82      F   High\n2         2         90            88      M    Low\n3         3         78            80      F Medium\n4         4         88            85   <NA>   <NA>\n5         5         92            91   <NA>   <NA>\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `left_join()` includes all students from `test_scores_df` and adds corresponding demographic information where available. Students without demographic data have `NA` in those columns.\n\n### 6.1.3 Full Join: Comprehensive Analysis of Multiple Datasets\n\nA **full join** merges all rows from both datasets, filling unmatched areas with `NA`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Performing a full join on StudentID\nfull_combined_df <- test_scores_df |> full_join(demographics_df, by = \"StudentID\")\nfull_combined_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  StudentID Math_Score Reading_Score Gender    SES\n1         1         85            82      F   High\n2         2         90            88      M    Low\n3         3         78            80      F Medium\n4         4         88            85   <NA>   <NA>\n5         5         92            91   <NA>   <NA>\n6         6         NA            NA      M    Low\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `full_join()` combines all rows from `test_scores_df` and `demographics_df`, retaining all students and filling in missing values with `NA`.\n\n## 6.2 Reshaping Educational Data\n\nReshaping data is often necessary to perform certain types of analyses, such as tracking student performance across subjects or years.\n\n### 6.2.1 pivot_longer(): Analyzing Subject Performance Over Time\n\n`pivot_longer()` is useful for converting wide data (where each subject is a column) into long data, which is more suitable for longitudinal analysis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example wide data frame\nsubject_scores_df <- data.frame(\n  StudentID = c(1, 2, 3),\n  Math_2019 = c(85, 88, 90),\n  Math_2020 = c(87, 85, 92),\n  Reading_2019 = c(82, 80, 88),\n  Reading_2020 = c(85, 83, 90)\n)\n\n# Converting to long format\nlong_scores_df <- subject_scores_df |> \n  pivot_longer(cols = -StudentID, names_to = c(\"Subject\", \"Year\"), names_sep = \"_\", values_to = \"Score\")\nlong_scores_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   StudentID Subject Year  Score\n       <dbl> <chr>   <chr> <dbl>\n 1         1 Math    2019     85\n 2         1 Math    2020     87\n 3         1 Reading 2019     82\n 4         1 Reading 2020     85\n 5         2 Math    2019     88\n 6         2 Math    2020     85\n 7         2 Reading 2019     80\n 8         2 Reading 2020     83\n 9         3 Math    2019     90\n10         3 Math    2020     92\n11         3 Reading 2019     88\n12         3 Reading 2020     90\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `pivot_longer()` reshapes the dataset so that each subject's scores across different years are in their own rows. The `names_to` and `names_sep` arguments split the column names into `Subject` and `Year`.\n\n### 6.2.2 pivot_wider(): Comparing Yearly Performance by Subject\n\n`pivot_wider()` converts long-format data back to wide format, which is useful for comparing scores across subjects or years side by side.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Converting back to wide format\nwide_scores_df <- long_scores_df |> \n  pivot_wider(names_from = c(\"Subject\", \"Year\"), values_from = \"Score\")\nwide_scores_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n  StudentID Math_2019 Math_2020 Reading_2019 Reading_2020\n      <dbl>     <dbl>     <dbl>        <dbl>        <dbl>\n1         1        85        87           82           85\n2         2        88        85           80           83\n3         3        90        92           88           90\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `pivot_wider()` rearranges the data so that each subject and year combination becomes a separate column, allowing for easy comparison across different time points.\n\n## 6.3 Handling Missing Data in Educational Datasets\n\nEducational datasets often contain missing values due to various reasons, such as incomplete surveys or missing records. Proper handling of missing data is crucial for accurate analysis.\n\n### 6.3.1 Identifying and Summarizing Missing Data\n\nYou can use `is.na()` to identify missing values and `summarise()` to count them.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Identifying missing values in the combined dataset\nmissing_summary <- combined_left_df |> \n  summarise(across(everything(), ~sum(is.na(.))))\nmissing_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  StudentID Math_Score Reading_Score Gender SES\n1         0          0             0      2   2\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- This code counts the number of missing values (`NA`) in each column of the `combined_left_df` dataset, providing a summary of data completeness.\n\n### 6.3.2 Replacing Missing Values: Imputation\n\nImputation involves replacing missing values with substituted values. A common approach in educational data is to use the mean or median.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Replacing missing SES values with \"Unknown\"\nfilled_df <- combined_left_df |> \n  mutate(SES = replace_na(SES, \"Unknown\"))\nfilled_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  StudentID Math_Score Reading_Score Gender     SES\n1         1         85            82      F    High\n2         2         90            88      M     Low\n3         3         78            80      F  Medium\n4         4         88            85   <NA> Unknown\n5         5         92            91   <NA> Unknown\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `replace_na()` replaces `NA` values in the `SES` column with `\"Unknown\"`, which is useful when the socioeconomic status is missing.\n\n### 6.3.3 Removing Rows with Missing Values\n\nIn some cases, it may be necessary to remove rows with missing data to ensure the integrity of the analysis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Removing rows with missing Math scores\ncleaned_scores_df <- combined_df |> drop_na(Math_Score)\ncleaned_scores_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  StudentID Math_Score Reading_Score SchoolID Funding_Per_Student\n1         1         85            82        1               10000\n2         2         90            88        1               10000\n3         3         78            80        2                8000\n4         4         88            85        2                8000\n5         5         92            91        3                9000\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `drop_na()` removes rows where the `Math_Score` is missing, ensuring that only complete cases are used in the analysis.\n\n## Exercises and Solutions\n\n### Exercise 1: Merging Student and Teacher Data\n\n1. Create two data frames, `student_scores_df` with columns `StudentID`, `Math_Score`, and `Reading_Score`, and `teacher_info_df` with columns `TeacherID`, `StudentID`, and `TeacherExperience`. Perform a left join to combine these datasets.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating the data frames\nstudent_scores_df <- data.frame(\n  StudentID = c(1, 2, 3, 4),\n  Math_Score = c(85, 90, 78, 88),\n  Reading_Score = c(82, 88, 80, 85)\n)\n\nteacher_info_df <- data.frame(\n  TeacherID = c(101, 102, 101, 103),\n  StudentID = c(1, 2, 3, 4),\n  TeacherExperience = c(5, 10, 5, 7)\n)\n\n# Performing the left join\ncombined_teacher_df <- student_scores_df |> left_join(teacher_info_df, by = \"StudentID\")\ncombined_teacher_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  StudentID Math_Score Reading_Score TeacherID TeacherExperience\n1         1         85            82       101                 5\n2         2         90            88       102                10\n3         3         78            80       101                 5\n4         4         88            85       103                 7\n```\n\n\n:::\n:::\n\n\n\n\n### Exercise 2: Reshaping Data for Cohort Analysis\n\n1. Start with a wide data frame `cohort_scores_df` with columns `StudentID`, `Cohort_2019_Math`, `Cohort_2019_Reading`, `Cohort_2020_Math`, and `Cohort_2020_Reading`. Convert this data frame to a long format, separating cohort year and subject.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating the wide data frame\ncohort_scores_df <- data.frame(\n  StudentID = c(1, 2, 3),\n  Cohort_2019_Math = c(85, 88, 90),\n  Cohort_2019_Reading = c(82, 80, 88),\n  Cohort_2020_Math = c(87, 85, 92),\n  Cohort_2020_Reading = c(85, 83, 90)\n)\n\n# Converting to long format\nlong_cohort_df <- cohort_scores_df |> \n  pivot_longer(\n    cols = -StudentID, \n    names_to = c(\"Cohort_Year\", \"Subject\"), names_sep = \"_\", values_to = \"Score\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Expected 2 pieces. Additional pieces discarded in 4 rows [1, 2, 3, 4].\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_cohort_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   StudentID Cohort_Year Subject Score\n       <dbl> <chr>       <chr>   <dbl>\n 1         1 Cohort      2019       85\n 2         1 Cohort      2019       82\n 3         1 Cohort      2020       87\n 4         1 Cohort      2020       85\n 5         2 Cohort      2019       88\n 6         2 Cohort      2019       80\n 7         2 Cohort      2020       85\n 8         2 Cohort      2020       83\n 9         3 Cohort      2019       90\n10         3 Cohort      2019       88\n11         3 Cohort      2020       92\n12         3 Cohort      2020       90\n```\n\n\n:::\n:::\n\n\n\n\n### Exercise 3: Handling Missing Data in School Surveys\n\n1. Create a data frame `school_survey_df` with columns `SchoolID`, `StudentSatisfaction`, and `TeacherTurnover`. Introduce missing values into the `StudentSatisfaction` column. Replace these missing values with the median of the available satisfaction scores.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating the data frame with missing values\nschool_survey_df <- data.frame(\n  SchoolID = c(1, 2, 3, 4),\n  StudentSatisfaction = c(85, NA, 78, 90),\n  TeacherTurnover = c(10, 15, 8, 12)\n)\n\n# Replacing missing values with the median\nschool_survey_df <- school_survey_df |> \n  mutate(StudentSatisfaction = replace_na(StudentSatisfaction, median(StudentSatisfaction, na.rm = TRUE)))\nschool_survey_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  SchoolID StudentSatisfaction TeacherTurnover\n1        1                  85              10\n2        2                  85              15\n3        3                  78               8\n4        4                  90              12\n```\n\n\n:::\n:::\n\n\n\n\n### Exercise 4: Combining Data with Different Keys\n\n1. Create two data frames, `school_expenditure_df` with columns `SchoolID`, `Expenditure_Per_Student`, and `Total_Expenditure`, and `student_scores_df` with `SchoolID`, `Math_Score`, and `Reading_Score`. Perform a full join on `SchoolID` to combine these datasets, then filter to keep only schools with available expenditure data.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating the data frames\nschool_expenditure_df <- data.frame(\n  SchoolID = c(1, 2, 3),\n  Expenditure_Per_Student = c(10000, 8000, 9000),\n  Total_Expenditure = c(500000, 400000, 450000)\n)\n\nstudent_scores_df <- data.frame(\n  SchoolID = c(1, 2, 4),\n  Math_Score = c(85, 90, 78),\n  Reading_Score = c(82, 88, 80)\n)\n\n# Performing the full join\ncombined_expenditure_df <- school_expenditure_df |> full_join(student_scores_df, by = \"SchoolID\")\n\n# Filtering to keep only schools with expenditure data\nfiltered_expenditure_df <- combined_expenditure_df |> filter(!is.na(Expenditure_Per_Student))\nfiltered_expenditure_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  SchoolID Expenditure_Per_Student Total_Expenditure Math_Score Reading_Score\n1        1                   10000            500000         85            82\n2        2                    8000            400000         90            88\n3        3                    9000            450000         NA            NA\n```\n\n\n:::\n:::\n\n\n\n\n### Exercise 5: Reshaping Data for Trend Analysis\n\n1. Using a data frame `annual_scores_df` with columns `Year`, `SchoolID`, `Average_Math_Score`, and `Average_Reading_Score`, convert the data from wide to long format to analyze trends in average scores over time.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating the wide data frame\nannual_scores_df <- data.frame(\n  Year = c(2019, 2020, 2021),\n  SchoolID = c(1, 1, 1),\n  Average_Math_Score = c(78, 80, 82),\n  Average_Reading_Score = c(75, 77, 79)\n)\n\n# Converting to long format\nlong_annual_scores_df <- annual_scores_df |> \n  pivot_longer(cols = starts_with(\"Average\"), names_to = \"Subject\", names_prefix = \"Average_\", values_to = \"Score\")\nlong_annual_scores_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n   Year SchoolID Subject       Score\n  <dbl>    <dbl> <chr>         <dbl>\n1  2019        1 Math_Score       78\n2  2019        1 Reading_Score    75\n3  2020        1 Math_Score       80\n4  2020        1 Reading_Score    77\n5  2021        1 Math_Score       82\n6  2021        1 Reading_Score    79\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}