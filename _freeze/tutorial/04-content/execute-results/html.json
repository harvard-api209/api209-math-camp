{
  "hash": "c5fc6d4ef884e1896d97a468891114e0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tutorial 4: Data Analysis with Tidyverse\"\nformat: html\n---\n\n\n\n\n# Data Analysis with Tidyverse\n\nIn this tutorial, we will delve deeper into data analysis using the Tidyverse, focusing on more advanced data manipulation techniques. We will explore grouping data, summarizing results, and transforming data into a tidy format. These techniques are crucial for conducting meaningful data analysis, particularly in the context of educational data. We will load the `dplyr` and `tidyr` packages from the tidyverse for this tutorial. Remember that if you haven't installed the tidyverse, you can use `install.packages()`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\n```\n:::\n\n\n\n\n## 4.1 Grouping and Summarizing Data\n\nOne of the most powerful features of `dplyr` is the ability to group data by one or more variables and then summarize each group using a variety of summary statistics.\n\n### 4.1.1 group_by(): Grouping Data\n\nThe `group_by()` function allows you to group data by one or more variables. This is often the first step in data analysis when you want to calculate summary statistics for different groups within your dataset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example data frame\nstudents_df <- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eva\"),\n  Major = c(\"Economics\", \"Economics\", \"History\", \"Biology\", \"History\"),\n  Score = c(85, 90, 78, 88, 92)\n)\n\n# Grouping by Major\ngrouped_df <- students_df |> \n  group_by(Major)\ngrouped_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n# Groups:   Major [3]\n  Name    Major     Score\n  <chr>   <chr>     <dbl>\n1 Alice   Economics    85\n2 Bob     Economics    90\n3 Charlie History      78\n4 David   Biology      88\n5 Eva     History      92\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `group_by()` creates a grouped data frame where operations can be applied separately to each group.\n- In this example, students are grouped by their `Major`.\n\n### 4.1.2 summarise(): Summarizing Data\n\nOnce the data is grouped, you can use the `summarise()` function to calculate summary statistics, such as the mean, median, count, etc., for each group.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculating the average score for each major\nsummary_df <- grouped_df |> \n  summarise(AverageScore = mean(Score))\nsummary_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  Major     AverageScore\n  <chr>            <dbl>\n1 Biology           88  \n2 Economics         87.5\n3 History           85  \n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `summarise()` creates a new data frame with summary statistics calculated for each group. Here, the mean score is calculated for each `Major`.\n\n### 4.1.3 Combining group_by() and summarise()\n\nYou can combine `group_by()` and `summarise()` to perform complex analyses on your data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculating both the average score and the number of students in each major\nsummary_df <- students_df |>\n  group_by(Major) |>\n  summarise(\n    AverageScore = mean(Score),\n    StudentCount = n()\n  )\nsummary_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  Major     AverageScore StudentCount\n  <chr>            <dbl>        <int>\n1 Biology           88              1\n2 Economics         87.5            2\n3 History           85              2\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- This example shows how to calculate multiple summary statistics at once. The `n()` function counts the number of observations in each group.\n\n## 4.2 Data Transformation with mutate() and transmute()\n\nThe `mutate()` function allows you to create new variables or modify existing ones, while `transmute()` does the same but only keeps the newly created variables.\n\n### 4.2.1 mutate(): Creating and Modifying Variables\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adding a new column for standardized scores\nstudents_df <- students_df |>\n  mutate(\n    StandardizedScore = (Score - mean(Score)) / sd(Score)\n  )\n\nstudents_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name     Major Score StandardizedScore\n1   Alice Economics    85        -0.2930973\n2     Bob Economics    90         0.6228318\n3 Charlie   History    78        -1.5753981\n4   David   Biology    88         0.2564602\n5     Eva   History    92         0.9892035\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `mutate()` creates a new column `StandardizedScore`, which standardizes the `Score` by subtracting the mean and dividing by the standard deviation.\n\n### 4.2.2 transmute(): Keeping Only New Variables\n\nIf you only want to keep the newly created variables, use `transmute()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Keeping only the standardized scores\nstandardized_df <- students_df |>\n  transmute(\n    Name, StandardizedScore = (Score - mean(Score)) / sd(Score)\n  )\n\nstandardized_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name StandardizedScore\n1   Alice        -0.2930973\n2     Bob         0.6228318\n3 Charlie        -1.5753981\n4   David         0.2564602\n5     Eva         0.9892035\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `transmute()` creates the `StandardizedScore` column and drops all other columns except `Name`.\n\n## 4.3 Pivoting Data with pivot_longer() and pivot_wider()\n\nData often needs to be reshaped from wide to long format or vice versa. The `pivot_longer()` and `pivot_wider()` functions from the `tidyr` package are used for this purpose.\n\n### 4.3.1 pivot_longer(): Converting Data from Wide to Long Format\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example wide data frame\nwide_df <- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Math_Score = c(85, 90, 78),\n  History_Score = c(88, 80, 90)\n)\n\n# Converting to long format\nlong_df <- wide_df |>\n  pivot_longer(\n    cols = contains(\"Score\"), \n    names_to = \"Subject\", \n    values_to = \"Score\"\n  )\n\nlong_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  Name    Subject       Score\n  <chr>   <chr>         <dbl>\n1 Alice   Math_Score       85\n2 Alice   History_Score    88\n3 Bob     Math_Score       90\n4 Bob     History_Score    80\n5 Charlie Math_Score       78\n6 Charlie History_Score    90\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `pivot_longer()` converts the data from wide format (separate columns for each subject) to long format (one column for subjects and one for scores).\n- The `cols` argument specifies which columns to pivot, `names_to` specifies the name of the new variable that will contain the original column names, and `values_to` specifies the name of the variable that will contain the values.\n\n### 4.3.2 pivot_wider(): Converting Data from Long to Wide Format\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Converting long format back to wide format\nwide_again_df <- long_df |>\n  pivot_wider(\n    names_from = Subject, \n    values_from = Score\n  )\n\nwide_again_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  Name    Math_Score History_Score\n  <chr>        <dbl>         <dbl>\n1 Alice           85            88\n2 Bob             90            80\n3 Charlie         78            90\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `pivot_wider()` is the opposite of `pivot_longer()`. It spreads key-value pairs across multiple columns, converting the data back to wide format.\n\n## Exercises and Solutions\n\n### Exercise 1: Grouping and Summarizing Data\n\n1. Using the `students_df` data frame, group the data by `Major`.\n2. Calculate the total number of students and the maximum score for each `Major`.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Grouping by Major\ngrouped_df <- students_df |> \n  group_by(Major)\n\n# Step 2: Summarising total students and maximum score\nsummary_df <- grouped_df |>\n  summarise(\n    TotalStudents = n(),\n    MaxScore = max(Score)\n  )\n```\n:::\n\n\n\n\n### Exercise 2: Mutating Data\n\n1. Create a new column in `students_df` called `ScoreCategory` that categorizes scores as \"High\" (>= 85) or \"Low\" (< 85).\n2. Modify the `ScoreCategory` column to reflect \"Very High\" for scores >= 90.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Adding ScoreCategory column\nstudents_df <- students_df |>\n  mutate(\n    ScoreCategory = ifelse(Score >= 85, \"High\", \"Low\")\n  )\n\n# Step 2: Modifying ScoreCategory for Very High scores\nstudents_df <- students_df |>\n  mutate(\n    ScoreCategory = ifelse(Score >= 90, \"Very High\", ScoreCategory)\n  )\n\nstudents_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name     Major Score StandardizedScore ScoreCategory\n1   Alice Economics    85        -0.2930973          High\n2     Bob Economics    90         0.6228318     Very High\n3 Charlie   History    78        -1.5753981           Low\n4   David   Biology    88         0.2564602          High\n5     Eva   History    92         0.9892035     Very High\n```\n\n\n:::\n:::\n\n\n\n\n### Exercise 3: Pivoting Data\n\n1. Convert the `wide_df` data frame from wide to long format using `pivot_longer()`.\n2. Rename the `Subject` column to `Course` in the long data frame.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Pivoting from wide to long format\nlong_df <- wide_df |>\n  pivot_longer(\n    cols = contains(\"Score\"), \n    names_to = \"Subject\", \n    values_to = \"Score\"\n  )\n\n# Step 2: Renaming Subject to Course\nlong_df <- long_df |>\n  rename(Course = Subject)\n\nlong_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  Name    Course        Score\n  <chr>   <chr>         <dbl>\n1 Alice   Math_Score       85\n2 Alice   History_Score    88\n3 Bob     Math_Score       90\n4 Bob     History_Score    80\n5 Charlie Math_Score       78\n6 Charlie History_Score    90\n```\n\n\n:::\n:::\n\n\n\n\n### Exercise 4: Combining Data Transformation and Summarization\n\n1. Using `students_df`, create a new column called `AdjustedScore` where each score is increased by 5%.\n2. Group the data by `Major` and calculate the average `AdjustedScore` for each `Major`.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Adding AdjustedScore column\nstudents_df <- students_df |>\n  mutate(AdjustedScore = Score * 1.05)\n\n# Step 2: Grouping by Major and calculating average AdjustedScore\nsummary_df <- students_df |>\n  group_by(Major) |>\n  summarise(AverageAdjustedScore = mean(AdjustedScore))\n```\n:::\n\n\n\n\n### Exercise 5: Advanced Pivoting\n\n1. Using `long_df`, convert the data back to wide format with `pivot_wider()`.\n2. Ensure the resulting data frame has `Name` as rows and `Course` as columns with scores as values.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pivoting from long to wide format\nwide_again_df <- long_df |>\n  pivot_wider(names_from = Course, values_from = Score)\n\nwide_again_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  Name    Math_Score History_Score\n  <chr>        <dbl>         <dbl>\n1 Alice           85            88\n2 Bob             90            80\n3 Charlie         78            90\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}