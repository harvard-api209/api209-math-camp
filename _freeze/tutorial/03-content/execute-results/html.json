{
  "hash": "78e9a86614e718eca71a4a47c4991bf4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tutorial 3: Introduction to Tidyverse and the Base Pipe\"\nformat: html\n---\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n# Introduction to Tidyverse and the Base Pipe\n\nIn this tutorial, we will introduce the **Tidyverse**, a collection of R packages designed for data science. We will also explore the **base pipe** (`|>`), which allows for cleaner and more readable code by chaining operations. This tutorial will guide you through essential data manipulation functions using the `dplyr` package within the Tidyverse, with examples focused on education data.\n\n## 3.1 Introduction to Tidyverse\n\nThe **Tidyverse** is a suite of R packages that work together to simplify data manipulation, exploration, and visualization. Key packages in the Tidyverse include `dplyr`, `ggplot2`, `tidyr`, `readr`, and more. In this tutorial, we'll focus on `dplyr`, which is used for data manipulation.\n\n### 3.1.1 Installing and Loading Tidyverse\n\nBefore using Tidyverse functions, you need to install and load the package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install Tidyverse (if not already installed)\ninstall.packages(\"tidyverse\")\n\n# Load Tidyverse\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n**Explanation:**\n- The `install.packages()` function installs the Tidyverse package if it isn't already installed on your system.\n- The `library()` function loads the Tidyverse, making its functions available for use.\n\n### 3.1.2 Introduction to the Base Pipe (`|>`)\n\nThe **base pipe** operator `|>` was introduced in R 4.1.0. It allows for cleaner, more readable code by enabling a sequence of operations to be chained together.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example using base pipe to calculate the mean of a vector\nscores <- c(85, 90, 78, 92, 88)\nmean_score <- scores |> mean()\nmean_score\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 86.6\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- The `|>` operator takes the output of the left-hand expression and passes it as the first argument to the function on the right-hand side.\n- In this example, `scores` is passed to the `mean()` function to calculate the mean score.\n\n## 3.2 dplyr Basics\n\n`dplyr` is the main package within the Tidyverse for data manipulation. It provides a set of intuitive functions for working with data frames.\n\n### 3.2.1 select(): Selecting Columns\n\nThe `select()` function allows you to choose specific columns from a data frame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example data frame\nstudents_df <- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(20, 21, 19),\n  Score = c(85, 90, 78),\n  Major = c(\"Economics\", \"History\", \"Biology\")\n)\n\n# Selecting Name and Score columns\nselected_df <- students_df |> select(Name, Score)\nselected_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name Score\n1   Alice    85\n2     Bob    90\n3 Charlie    78\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `select()` is used to pick specific columns from the data frame.\n- The base pipe `|>` passes `students_df` to the `select()` function.\n\n### 3.2.2 filter(): Filtering Rows\n\nThe `filter()` function allows you to filter rows based on specific conditions.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtering students with a score greater than 80\nfiltered_df <- students_df |> filter(Score > 80)\nfiltered_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Name Age Score     Major\n1 Alice  20    85 Economics\n2   Bob  21    90   History\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `filter()` is used to select rows that meet a condition. Here, only students with a score greater than 80 are included.\n\n### 3.2.3 arrange(): Arranging Rows\n\nThe `arrange()` function orders the rows of a data frame based on the values of specified columns.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Arranging students by score in descending order\narranged_df <- students_df |> arrange(desc(Score))\narranged_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name Age Score     Major\n1     Bob  21    90   History\n2   Alice  20    85 Economics\n3 Charlie  19    78   Biology\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `arrange()` orders the rows based on the specified column. `desc()` is used to sort in descending order.\n\n### 3.2.4 mutate(): Creating New Variables\n\nThe `mutate()` function creates new variables or modifies existing ones within a data frame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adding a new column for grade based on score\nstudents_df <- students_df |> mutate(Grade = ifelse(Score >= 85, \"A\", \"B\"))\nstudents_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name Age Score     Major Grade\n1   Alice  20    85 Economics     A\n2     Bob  21    90   History     A\n3 Charlie  19    78   Biology     B\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `mutate()` adds a new column `Grade`, where students with a score of 85 or higher receive an \"A\" grade, and others receive a \"B\".\n\n### 3.2.5 summarise() and group_by(): Summarizing Data\n\nThe `summarise()` function, used in conjunction with `group_by()`, allows you to compute summary statistics for groups of data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Grouping by Major and calculating the average score for each group\nsummary_df <- students_df |>\n  group_by(Major) |>\n  summarise(AverageScore = mean(Score))\nsummary_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  Major     AverageScore\n  <chr>            <dbl>\n1 Biology             78\n2 Economics           85\n3 History             90\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- `group_by()` groups the data by a specific variable (`Major` in this case).\n- `summarise()` calculates the mean score for each group.\n\n## Exercises and Solutions\n\n### Exercise 1: Selecting and Filtering Data\n\n1. Using the `students_df` data frame, select only the `Name` and `Major` columns.\n2. Filter the data to include only students who are majoring in \"Economics\".\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Selecting Name and Major columns\nselected_df <- students_df |> \n  select(Name, Major)\n\n# Step 2: Filtering students majoring in Economics\neconomics_students_df <- selected_df |> \n  filter(Major == \"Economics\")\n\neconomics_students_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Name     Major\n1 Alice Economics\n```\n\n\n:::\n:::\n\n\n\n\n### Exercise 2: Arranging and Mutating Data\n\n1. Arrange the `students_df` data frame by `Age` in ascending order.\n2. Add a new column called `AgeGroup` that categorizes students as \"Young\" (Age <= 20) or \"Mature\" (Age > 20).\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Arranging by Age\narranged_df <- students_df |> \n  arrange(Age)\n\n# Step 2: Adding AgeGroup column\nstudents_df <- students_df |>\n  mutate(AgeGroup = ifelse(Age <= 20, \"Young\", \"Mature\"))\n```\n:::\n\n\n\n\n### Exercise 3: Summarizing Data by Group\n\n1. Group the `students_df` data frame by `Major`.\n2. Calculate the total number of students and the average score for each `Major`.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Grouping by Major\ngrouped_df <- students_df |> \n  group_by(Major)\n\n# Step 2: Summarising total students and average score\nsummary_df <- grouped_df |>\n  summarise(\n    TotalStudents = n(),\n    AverageScore = mean(Score)\n  )\n```\n:::\n\n\n\n\n### Exercise 4: Combining dplyr Functions\n\n1. Using `students_df`, filter for students with a score greater than 80, then select their `Name` and `Score`.\n2. Arrange the result by `Score` in descending order.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combining filter, select, and arrange\nresult_df <- students_df |>\n  filter(Score > 80) |>\n  select(Name, Score) |>\n  arrange(desc(Score))\n```\n:::\n\n\n\n\n### Exercise 5: Applying Multiple Transformations\n\n1. Create a new data frame by selecting `Name`, `Score`, and `Major` from `students_df`.\n2. Filter out students with a score less than 80.\n3. Add a column `Pass` indicating whether the student passed (Score >= 85).\n4. Arrange the result by `Major` and `Score`.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Applying multiple transformations\nfinal_df <- students_df |>\n  select(Name, Score, Major) |>\n  filter(Score >= 80) |>\n  mutate(Pass = Score >= 85) |>\n  arrange(Major, desc(Score))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}