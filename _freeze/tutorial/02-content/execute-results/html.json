{
  "hash": "55b604e7c0ea4ab1567418ecbb9188aa",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tutorial 2: Working with Data Structures in R\"\nformat: html\n---\n\n\n\n\n# Working with Data Structures in R\n\nIn this tutorial, we will explore three fundamental data structures in R: **matrices**, **lists**, and **data frames**. Understanding these structures is essential for effective data manipulation and analysis. This tutorial includes detailed explanations, code examples, and exercises with solutions to reinforce learning.\n\n## 2.1 Matrices\n\nA **matrix** is a two-dimensional data structure that stores elements of the same data type arranged in rows and columns. Matrices are useful for mathematical computations and organizing data in a tabular format.\n\n### 2.1.1 Creating Matrices\n\nUse the `matrix()` function to create a matrix by specifying the data, number of rows, and number of columns.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a matrix of student scores across 3 subjects\nscores <- c(85, 78, 92, 90, 82, 79, 78, 91, 86)\nstudent_scores <- matrix(scores, nrow = 3, ncol = 3, byrow = TRUE)\n\n# Assigning row and column names\nrownames(student_scores) <- c(\"Student1\", \"Student2\", \"Student3\")\ncolnames(student_scores) <- c(\"Math\", \"History\", \"Biology\")\n\nstudent_scores\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Math History Biology\nStudent1   85      78      92\nStudent2   90      82      79\nStudent3   78      91      86\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- A numeric vector `scores` is created containing nine score values.\n- The `matrix()` function organizes these scores into a 3x3 matrix filled by rows.\n- `rownames()` and `colnames()` assign descriptive labels to rows and columns for clarity.\n\n### 2.1.2 Accessing and Modifying Matrix Elements\n\nAccess specific elements, rows, or columns using square brackets `[]`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Accessing the score of Student2 in History\nstudent_scores[\"Student2\", \"History\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 82\n```\n\n\n:::\n\n```{.r .cell-code}\n# Accessing all scores of Student3\nstudent_scores[\"Student3\", ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Math History Biology \n     78      91      86 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Modifying a specific score\nstudent_scores[\"Student1\", \"Biology\"] <- 95\n```\n:::\n\n\n\n\n**Explanation:**\n- Specify row and column names or indices within brackets to access elements.\n- Assign new values to modify existing data in the matrix.\n\n### 2.1.3 Matrix Operations\n\nPerform various operations such as calculating row and column sums or means.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculating total scores for each student\ntotal_scores <- rowSums(student_scores)\n\n# Calculating average scores for each subject\naverage_subject_scores <- colMeans(student_scores)\n```\n:::\n\n\n\n\n**Explanation:**\n- `rowSums()` computes the sum across rows, giving total scores per student.\n- `colMeans()` computes the average across columns, providing average scores per subject.\n\n## 2.2 Lists\n\nA **list** is a versatile data structure that can contain elements of different types, including numbers, strings, vectors, and even other lists.\n\n### 2.2.1 Creating Lists\n\nUse the `list()` function to create a list containing heterogeneous elements.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a list with student information\nstudent_info <- list(\n  name = \"Alice\",\n  age = 20,\n  major = \"Economics\",\n  scores = c(88, 92, 85)\n)\n\nstudent_info\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$name\n[1] \"Alice\"\n\n$age\n[1] 20\n\n$major\n[1] \"Economics\"\n\n$scores\n[1] 88 92 85\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- The list `student_info` contains character, numeric, and vector elements, encapsulating diverse data related to a student.\n\n### 2.2.2 Accessing and Modifying List Elements\n\nAccess list elements using the `$` operator or double square brackets `[[]]`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Accessing the student's major\nstudent_info$major\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Economics\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Accessing the student's scores\nstudent_info[[\"scores\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 88 92 85\n```\n\n\n:::\n\n```{.r .cell-code}\n# Modifying the student's age\nstudent_info$age <- 21\n```\n:::\n\n\n\n\n**Explanation:**\n- `$` and `[[]]` operators retrieve specific elements from the list.\n- Assign new values to update existing elements within the list.\n\n### 2.2.3 Nested Lists\n\nLists can contain other lists, allowing for complex data structures.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a nested list with course details\ncourse_details <- list(\n  course_name = \"Introduction to Economics\",\n  credits = 3,\n  instructor = list(\n    name = \"Dr. Smith\",\n    office = \"Room 101\",\n    email = \"dr.smith@university.edu\"\n  )\n)\n\ncourse_details\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$course_name\n[1] \"Introduction to Economics\"\n\n$credits\n[1] 3\n\n$instructor\n$instructor$name\n[1] \"Dr. Smith\"\n\n$instructor$office\n[1] \"Room 101\"\n\n$instructor$email\n[1] \"dr.smith@university.edu\"\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- The `instructor` element is itself a list containing detailed information, demonstrating how lists can be nested for hierarchical data representation.\n\n## 2.3 Data Frames\n\nA **data frame** is a table-like structure where each column can contain different data types. Data frames are widely used for storing and manipulating datasets.\n\n### 2.3.1 Creating Data Frames\n\nUse the `data.frame()` function to create a data frame by combining vectors of equal length.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a data frame with multiple students' information\nstudents_df <- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(20, 22, 19),\n  Major = c(\"Economics\", \"History\", \"Biology\"),\n  GPA = c(3.8, 3.6, 3.9)\n)\n\nstudents_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name Age     Major GPA\n1   Alice  20 Economics 3.8\n2     Bob  22   History 3.6\n3 Charlie  19   Biology 3.9\n```\n\n\n:::\n:::\n\n\n\n\n**Explanation:**\n- Each vector represents a column in the data frame, and each row represents an observation (a student in this case).\n\n### 2.3.2 Accessing and Modifying Data Frame Elements\n\nAccess data frame elements using `$`, `[]`, or `subset()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Accessing the 'Major' column\nstudents_df$Major\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Economics\" \"History\"   \"Biology\"  \n```\n\n\n:::\n\n```{.r .cell-code}\n# Accessing the second row\nstudents_df[2, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Name Age   Major GPA\n2  Bob  22 History 3.6\n```\n\n\n:::\n\n```{.r .cell-code}\n# Modifying Bob's GPA\nstudents_df[students_df$Name == \"Bob\", \"GPA\"] <- 3.7\n```\n:::\n\n\n\n\n**Explanation:**\n- `$` retrieves entire columns.\n- `[]` with row and column indices retrieves specific elements or subsets.\n- Logical conditions identify and modify specific rows.\n\n### 2.3.3 Adding and Removing Columns\n\nAdd new columns or remove existing ones as needed.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adding a new column for graduation year\nstudents_df$GraduationYear <- c(2022, 2021, 2023)\n\n# Removing the 'Age' column\nstudents_df$Age <- NULL\n```\n:::\n\n\n\n\n**Explanation:**\n- Assigning a vector to a new column name adds it to the data frame.\n- Setting a column to `NULL` removes it from the data frame.\n\n### 2.3.4 Filtering and Subsetting Data\n\nUse conditions to filter rows and select subsets of data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtering students with GPA above 3.7\nhigh_gpa_students <- subset(students_df, GPA > 3.7)\n\n# Selecting specific columns\nname_major_df <- students_df[, c(\"Name\", \"Major\")]\n```\n:::\n\n\n\n\n**Explanation:**\n- `subset()` filters rows based on specified conditions.\n- Column indices within `[]` select specific columns for a new data frame.\n\n## Exercises and Solutions\n\n### Exercise 1: Working with Matrices\n\n1. Create a matrix named `enrollment` representing the number of students enrolled in three courses over four semesters. Use the following data:\n   - Semester 1: 120, 85, 90\n   - Semester 2: 130, 80, 95\n   - Semester 3: 125, 90, 100\n   - Semester 4: 140, 88, 110\n2. Assign row names as \"Semester1\" to \"Semester4\" and column names as \"Economics\", \"History\", \"Biology\".\n3. Calculate the average enrollment for each course across all semesters.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Creating the enrollment matrix\nenrollment_numbers <- c(120, 85, 90, 130, 80, 95, 125, 90, 100, 140, 88, 110)\nenrollment <- matrix(enrollment_numbers, nrow = 4, byrow = TRUE)\n\n# Step 2: Assigning row and column names\nrownames(enrollment) <- c(\"Semester1\", \"Semester2\", \"Semester3\", \"Semester4\")\ncolnames(enrollment) <- c(\"Economics\", \"History\", \"Biology\")\n\n# Step 3: Calculating average enrollment for each course\naverage_enrollment <- colMeans(enrollment)\naverage_enrollment\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEconomics   History   Biology \n   128.75     85.75     98.75 \n```\n\n\n:::\n:::\n\n\n\n\n### Exercise 2: Creating and Manipulating Lists\n\n1. Create a list named `university` containing:\n   - `name`: \"ABC University\"\n   - `established`: 1965\n   - `departments`: a vector of \"Economics\", \"History\", \"Biology\"\n   - `student_count`: a vector of enrollment numbers 5000, 3000, 4000 corresponding to the departments.\n2. Access the `departments` element from the list.\n3. Add a new element `location` with the value \"Cityville\".\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Creating the university list\nuniversity <- list(\n  name = \"ABC University\",\n  established = 1965,\n  departments = c(\"Economics\", \"History\", \"Biology\"),\n  student_count = c(5000, 3000, 4000)\n)\n\n# Step 2: Accessing the departments element\nuniversity_departments <- university$departments\n\n# Step 3: Adding the location element\nuniversity$location <- \"Cityville\"\n```\n:::\n\n\n\n\n### Exercise 3: Building and Modifying Data Frames\n\n1. Create a data frame named `faculty_df` with the following data:\n   - `Name`: \"Dr. Adams\", \"Dr. Baker\", \"Dr. Clark\"\n   - `Department`: \"Economics\", \"History\", \"Biology\"\n   - `ExperienceYears`: 10, 8, 12\n2. Add a new row for \"Dr. Davis\" from the \"Economics\" department with 5 years of experience.\n3. Change \"Dr. Baker\"'s experience years to 9.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Creating the faculty_df data frame\nfaculty_df <- data.frame(\n  Name = c(\"Dr. Adams\", \"Dr. Baker\", \"Dr. Clark\"),\n  Department = c(\"Economics\", \"History\", \"Biology\"),\n  ExperienceYears = c(10, 8, 12),\n  stringsAsFactors = FALSE\n)\n\n# Step 2: Adding a new row for Dr. Davis\nnew_faculty <- data.frame(\n  Name = \"Dr. Davis\",\n  Department = \"Economics\",\n  ExperienceYears = 5,\n  stringsAsFactors = FALSE\n)\nfaculty_df <- rbind(faculty_df, new_faculty)\n\n# Step 3: Updating Dr. Baker's experience years\nfaculty_df[faculty_df$Name == \"Dr. Baker\", \"ExperienceYears\"] <- 9\n```\n:::\n\n\n\n\n### Exercise 4: Filtering and Selecting Data\n\n1. Using the `faculty_df` from Exercise 3, filter the data frame to include only faculty members from the \"Economics\" department.\n2. Select only the `Name` and `ExperienceYears` columns from the filtered data.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Filtering faculty members from Economics department\neconomics_faculty <- subset(faculty_df, Department == \"Economics\")\n\n# Step 2: Selecting Name and ExperienceYears columns\neconomics_faculty_details <- economics_faculty[, c(\"Name\", \"ExperienceYears\")]\n```\n:::\n\n\n\n\n### Exercise 5: Combining Data Frames\n\n1. Create a data frame named `courses_df` with:\n   - `CourseID`: 101, 102, 103\n   - `CourseName`: \"Microeconomics\", \"World History\", \"Genetics\"\n   - `Department`: \"Economics\", \"History\", \"Biology\"\n2. Merge `courses_df` with `faculty_df` based on the `Department` column.\n3. Remove any rows where there is no matching department in both data frames.\n\n**Solution:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Creating the courses_df data frame\ncourses_df <- data.frame(\n  CourseID = c(101, 102, 103),\n  CourseName = c(\"Microeconomics\", \"World History\", \"Genetics\"),\n  Department = c(\"Economics\", \"History\", \"Biology\"),\n  stringsAsFactors = FALSE\n)\n\n# Step 2: Merging courses_df with faculty_df\nmerged_df <- merge(courses_df, faculty_df, by = \"Department\")\n\n# Step 3: Ensuring all rows have matching departments (already ensured by merge function)\nmerged_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Department CourseID     CourseName      Name ExperienceYears\n1    Biology      103       Genetics Dr. Clark              12\n2  Economics      101 Microeconomics Dr. Adams              10\n3  Economics      101 Microeconomics Dr. Davis               5\n4    History      102  World History Dr. Baker               9\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}