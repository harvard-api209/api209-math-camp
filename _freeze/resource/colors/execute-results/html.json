{
  "hash": "090690a8da34ee9ec96288a39d864e06",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Color palettes\"\n---\n\n\n\n\n\n\n\n\n## Categories of color palettes\n\nWhen choosing colors, you need to make sure you work with a palette that mathches the nature of your data. There are three broad categories of color-able data: sequential, diverging, and qualitative.\n\nHere's are three plots I'll use throughout this page to illustrate their differences (and show off different colors). The code is hidden to save space—you can show the code and copy/paste it if you want to follow along:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\nlibrary(gapminder)\nlibrary(palmerpenguins)\nlibrary(ggokabeito)\nlibrary(scico)\nlibrary(rcartocolor)\nlibrary(MetBrewer)\nlibrary(MoMAColors)\nlibrary(patchwork)\n\nplot_diverging <- tribble(\n  ~category, ~pct,\n  \"Strongly disagree\", 0.12,\n  \"Disagree\", 0.18,\n  \"Neutral\", 0.15,\n  \"Agree\", 0.27,\n  \"Strongly agree\", 0.28\n) |>\n  mutate(category = fct_inorder(category)) |>\n  ggplot(aes(x = pct, y = category, fill = category)) +\n  geom_col() +\n  guides(fill = \"none\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\"))\n\nplot_sequential <- penguins |>\n  drop_na(sex) |>\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = flipper_length_mm)) +\n  geom_point() +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\"))\n\nplot_qualitative <- gapminder |>\n  filter(year %in% c(1967, 1987, 2007)) |>\n  group_by(year, continent) |>\n  summarize(avg_lifexp = mean(lifeExp)) |>\n  mutate(year = factor(year)) |>\n  ggplot(aes(x = year, y = avg_lifexp, fill = continent)) +\n  geom_col(position = \"dodge\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\"))\n```\n:::\n\n\n\n\n### Sequential\n\nWith sequential data, colors represent a range from low value to a high value, so the colors either stay within one shade or hue of a color, or use multiple related hues\n\n::: {.panel-tabset}\n\n### Default single blue hue\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_sequential\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/fig-sequential-base-1.png){#fig-sequential-base fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### Multiple red-purple hues (`RdPu` from ColorBrewer)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_sequential +\n  scale_color_distiller(palette = \"RdPu\", direction = 1)\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/fig-sequential-rdpu-1.png){#fig-sequential-rdpu fig-align='center' width=70%}\n:::\n:::\n\n\n\n:::\n\n### Diverging\n\nWith diverging data, colors represent values above and below some central value, like negative to zero to positive; disagree to neutral to agree; etc. These palettes typically involve three colors: two for the extremes and one for the middle\n\n::: {.panel-tabset}\n\n### Default ggplot colors\n\nBy default, ggplot doesn't actually do anything with diverging scales. If you have numeric data, it'll use a blue gradient; if you have categorical data, it'll use distinct colors. You're in charge of applying a diverging palette.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# This doesn't show up as diverging\nplot_diverging\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/fig-diverging-base-1.png){#fig-diverging-base fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### Diverging red-yellow-blue palette (`RdYlBu` from ColorBrewer)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_diverging +\n  scale_fill_brewer(palette = \"RdYlBu\", direction = 1)\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/fig-diverging-RdYlBu-1.png){#fig-diverging-RdYlBu fig-align='center' width=70%}\n:::\n:::\n\n\n\n:::\n\n::: {.callout-warning}\n### Don't use diverging palettes for non-diverging data!\n\nPeople will often throw diverging palettes onto plots that aren't actually diverging, like this:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_sequential +\n  scale_color_distiller(palette = \"RdBu\", direction = 1)\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/fig-diverging-sequential-1.png){#fig-diverging-sequential fig-align='center' width=70%}\n:::\n:::\n\n\n\n\nDon't do this! It looks weird having 200 be a super-faded middle color. Flipper length here ranges from a low number to a high number—the colors should reflect that.\n:::\n\n### Qualitative\n\nWith qualitative data, colors represent distinct categories and don't have an inherent order. The colors shouldn't look like they have a natural progression.\n\n::: {.panel-tabset}\n\n### Default ggplot colors\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_qualitative\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/fig-qualitative-base-1.png){#fig-qualitative-base fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### viridis colors\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_qualitative +\n  scale_fill_viridis_d()\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/fig-qualitative-viridis-1.png){#fig-qualitative-viridis fig-align='center' width=70%}\n:::\n:::\n\n\n\n:::\n\n\n## Using custom colors\n\nYou can use any custom colors with `scale_fill_manual()`/`scale_color_manual()` (for qualitative/categorical colors) or `scale_fill_gradident()`/`scale_color_gradient()` (for sequential/continuous colors).\n\nFeed these functions a vector of colors, either as named colors like <span style=\"color: #F00\"><i class=\"magic-block\" aria-hidden=\"true\">■</i>red</span>, <span style=\"color: #CD9B1D\"><i class=\"magic-block\" aria-hidden=\"true\">■</i>goldenrod3</span>, <span style=\"color: #191970\"><i class=\"magic-block\" aria-hidden=\"true\">■</i>midnightblue</span>, and so on ([see here for R's huge list of built-in color names](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf)), or as [hex codes](https://www.color-hex.com/) like <span style=\"color: #FF4136\"><i class=\"magic-block\" aria-hidden=\"true\">■</i>#FF4136</span>, <span style=\"color: #0074D9\"><i class=\"magic-block\" aria-hidden=\"true\">■</i>#0074D9</span>, and <span style=\"color: #FF851B\"><i class=\"magic-block\" aria-hidden=\"true\">■</i>#FF851B</span>.\n\n::: {.panel-tabset}\n\n### Hex colors\n\nI copied these colors from [clrs.cc](https://clrs.cc/).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_qualitative +\n  scale_fill_manual(\n    values = c(\"#0074D9\", \"#B10DC9\", \"#85144b\", \"#FF4136\", \"#FF851B\")\n  )\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### Named colors in a gradient\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_sequential +\n  scale_color_gradient(low = \"chocolate1\", high = \"chocolate4\")\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n:::\n\nOften organizations have specific color palettes that you're supposed to use. For instance, [GSU has a special \"Georgia State Blue\"](https://commkit.gsu.edu/website-management/web-color-guidelines/) (<span style=\"color: #0039A6\"><i class=\"magic-block\" aria-hidden=\"true\">■</i>#0039A6</span>) and a red accent (<span style=\"color: #CC0000\"><i class=\"magic-block\" aria-hidden=\"true\">■</i>#CC0000</span>). The Urban Institute has a [specific organizational color palette](https://urbaninstitute.github.io/graphics-styleguide/#color) with all sorts of guidelines for comparing two groups, three groups, sequential data, diverging data, and other special situations. They have specific red and blue colors to use for political parties too, like <span style=\"color: #1696d2\"><i class=\"magic-block\" aria-hidden=\"true\">■</i>#1696d2</span> for Democrats and <span style=\"color: #db2b27\"><i class=\"magic-block\" aria-hidden=\"true\">■</i>#db2b27</span> for Republicans.\n\nI often find it helpful to make a little object that contains all the custom colors I want to use so I don't have to remember what the cryptic hex codes mean. Here's [GSU's full palette](https://commkit.gsu.edu/website-management/web-color-guidelines/):\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngsu_colors <- c(\n  \"#0039A6\", \"#CC0000\", \"#374057\", \"#0071CE\",\n  \"#00AEEF\", \"#97CAEB\", \"#EEEEEE\", \"#CCCCCC\", \"#767679\"\n)\n```\n:::\n\n\n\n\nYou can access these colors by number:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngsu_colors[1:2]\n## [1] \"#0039A6\" \"#CC0000\"\ngsu_colors[5]\n## [1] \"#00AEEF\"\ngsu_colors[c(3, 5, 9)]\n## [1] \"#374057\" \"#00AEEF\" \"#767679\"\n```\n:::\n\n\n\n\nAnd you can use the `show_col()` function from the {scales} library to show them all:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nscales::show_col(gsu_colors)\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\nYou can use them in `scale_fill_manual()`/`scale_color_manual()` too:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_qualitative +\n  scale_fill_manual(\n    values = gsu_colors[1:5]\n  )\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\nIf you want to be extra fancy, [you can create more official custom color palettes]() like `scale_fill_gsu()`.\n\n\n## Perceptually uniform and scientifically calibrated palettes\n\nYou aren't limited to just the default ggplot color palettes, or even the default viridis palettes. There are lots of other [perceptually uniform palettes](https://colorcet.com/) that use special ranges of color that can either (1) be used as a sequential gradient or (2) be chopped up into equal distances to create recognizable distinct colors.\n\n\n### The Okabe-Ito palette\n\n[Masataka Okabe and Kei Ito](https://jfly.uni-koeln.de/color/) developed a qualitative color palette for all types of color-vision deficiencies in 2008, and Claus Wilke uses it throughout his [*Fundamentals of Data Visualization*](https://clauswilke.com/dataviz/) book that we use in this class ([he explains why here](https://clauswilke.com/dataviz/color-pitfalls.html#fig:palette-Okabe-Ito)).\n\n![](img/okabe-ito.png)\n\nYou can use it with [the {ggokabeito} package](https://malcolmbarrett.github.io/ggokabeito/) and `scale_fill_okabe_ito()`/`scale_color_okabe_ito()`:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_qualitative +\n  scale_fill_okabe_ito()\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### viridis\n\nYou've seen the regular green/blue/yellow viridis palette throughout the class, but there are are [a bunch of other palettes within viridis](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html#the-color-scales) like magma, plasma, inferno, mako, rocket, and turbo. \n\n![](img/viridis.png){width=90% fig-align=\"center\"}\n\nNone of the viridis palettes are diverging, but they work great for both sequential and qualitative data.\n\nThe viridis palettes come with {ggplot2} and you can use them with `scale_fill_viridis_d()`/`scale_color_viridis_d()` for discrete data and `scale_fill_viridis_c()`/`scale_color_viridis_c()` for continuous data.\n\n::: {.panel-tabset}\n\n### `plasma`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_qualitative +\n  scale_fill_viridis_d(option = \"plasma\")\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### `inferno`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_qualitative +\n  scale_fill_viridis_d(option = \"inferno\")\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### `mako`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_qualitative +\n  scale_fill_viridis_d(option = \"mako\")\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### `turbo`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_qualitative +\n  scale_fill_viridis_d(option = \"turbo\")\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n:::\n\n### Scientific colour maps\n\n[The {scico} package](https://github.com/thomasp85/scico) provides a ton of other similar well-designed palettes from the [Scientific Colour Maps project](https://www.fabiocrameri.ch/colourmaps/). The project includes sequential, diverging, and qualitative palettes and even has multi-sequential and cyclic palettes.\n\n![](img/ScientificColourMaps8-FabioCrameri.png)\n\nAfter loading the {scico} package, you can use these palettes with `scale_fill_scico_d()`/`scale_color_scico_d()` for discrete data and `scale_fill_scico_c()`/`scale_color_scico_c()` for continuous data.\n\n::: {.panel-tabset}\n### `batlow`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_qualitative +\n  scale_fill_scico_d(palette = \"batlow\")\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### `bamako`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_qualitative +\n  scale_fill_scico_d(palette = \"bamako\")\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### `hawaii`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_qualitative +\n  scale_fill_scico_d(palette = \"hawaii\")\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### `roma` (diverging)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_diverging +\n  scale_fill_scico_d(palette = \"roma\")\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### `broc` (diverging)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_diverging +\n  scale_fill_scico_d(palette = \"broc\")\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n:::\n\n### ColorBrewer\n\nGeographer [Cynthia Brewer](https://www.geog.psu.edu/directory/cynthia-brewer) developed a set of color palettes designed specifically for improving the readability of maps, but her palettes work incredibly well for regular plots too. There's also a [fantastic companion website](https://colorbrewer2.org/) for exploring all the different palettes, categories by sequential/diverging/qualitatitve, with options to filter by colorblind friendliness and print friendliness. \n\n![](img/colorbrewer.png)\n\nTo use one of the palettes, note what it's called [at the website](https://colorbrewer2.org/) and use that name as the `palette` argument. The ColorBrewer palettes come with {ggplot2} and you can use them with `scale_fill_brewer()`/`scale_color_brewer()` for discrete data and `scale_fill_distiller()`/`scale_color_distiller()` for continuous data.\n\n::: {.panel-tabset}\n### `YlOrRd` (sequential)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_sequential +\n  scale_color_distiller(palette = \"YlOrRd\")\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### `PuOr` (diverging)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_diverging +\n  scale_fill_brewer(palette = \"PuOr\")\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### `Set1` (qualitative)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_qualitative +\n  scale_fill_brewer(palette = \"Set1\")\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-27-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n:::\n\n\n### CARTOColors\n\nThe commerical GIS service [CARTO](https://carto.com/) created CARTOColors: [a set of open source geographic-like colors](https://carto.com/carto-colors/) just like ColorBrewer. Again, these were originally designed for maps, but they work great for regular data visualization too.\n\n![](img/cartocolors.png){width=85% fig-align=\"center\"}\n\nYou'll need to install [the {rcartocolor} package](https://jakubnowosad.com/rcartocolor/) to use them. After loading {rcartocolor}, you can use any of the palettes with `scale_fill_carto_d()`/`scale_color_carto_d()` for discrete data and `scale_fill_carto_c()`/`scale_color_carto_c()` for continuous data. Use the name of the palette at [the CARTOColors website](https://carto.com/carto-colors/) in the `palette` argument.\n\n::: {.panel-tabset}\n### `PurpOr` (sequential)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_sequential +\n  scale_color_carto_c(palette = \"PurpOr\")\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-28-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### `Temps` (diverging)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_diverging +\n  scale_fill_carto_d(palette = \"Temps\", direction = -1)\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-29-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### `Prism` (qualitative)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Extract 5 colors from the Prism palette and use them with scale_fill_manual()\nclrs <- carto_pal(12, \"Prism\")\n\nplot_qualitative +\n  scale_fill_manual(values = clrs[c(1, 4, 6, 7, 8)])\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-30-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n:::\n\n## Fun and artsy (but still useful!) palettes\n\nThere are also palettes that are hand-picked for beauty and/or fun. Not all of these are perceptually uniform or colorblind friendly, but they're great for when you want to have pretty graphics that fit a certain vibe. \n\n\n### Literal art: {MetBrewer} and {MoMAColors}\n\nUse palettes inspired by works in the Metropolitan Museum of Art and the Museum of Modern Art in New York. There are sequential, diverging, and qualitative palettes, and many are marked as colorblind friendly in [{MetBrewer}](https://github.com/BlakeRMills/MetBrewer) and [{MoMAColors}](https://github.com/BlakeRMills/MoMAColors)\n\nUse them by putting `met.brewer()` or `moma.colors()` inside `scale_fill_manual()`/`scale_color_manual()` or `scale_fill_gradientn()`/`scale_color_gradientn()`:\n\n#### {MetBrewer}\n\n::: {.panel-tabset}\n### `OKeeffe2` (sequential)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_sequential +\n  scale_color_gradientn(colors = met.brewer(\"OKeeffe2\"))\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-31-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n![](img/OKeeffe2.png)\n\n### `Hiroshige` (diverging)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Grab 5 of the middle colors from the palette\nclrs <- met.brewer(\"Hiroshige\")\n\nplot_diverging +\n  scale_fill_manual(values = clrs[3:7])\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-32-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n![](img/Hiroshige.png)\n\n### `Johnson` (qualitative)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_qualitative +\n  scale_fill_manual(values = met.brewer(\"Johnson\"))\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-33-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n![](img/Johnson.png)\n\n:::\n\n\n#### {MoMAColors}\n\n::: {.panel-tabset}\n### `VanGogh` (sequential)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_sequential +\n  scale_color_gradientn(colors = moma.colors(\"VanGogh\")[2:7])\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-34-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n![](img/VanGogh_Side.png)\n\n### `Kippenberger` (diverging)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Grab 5 of the middle colors from the palette\nclrs <- moma.colors(\"Kippenberger\")\n\nplot_diverging +\n  scale_fill_manual(values = clrs[c(2, 4, 6, 8, 10)])\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-35-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n![](img/Kippenberger_Side.png)\n\n### `ustwo` (qualitative)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_qualitative +\n  scale_fill_manual(values = moma.colors(\"ustwo\", 5))\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/unnamed-chunk-36-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n![](img/ustwo_Side.png)\n\n:::\n\n### Other fun things\n\nThere are *so many others*. [The {paletteer} package](https://emilhvitfeldt.github.io/paletteer/) contains **thousands** of others—it's like a central collection of every possible palette. \n\nYou can also access individual palettes without using {paletteer}, including these:\n\n**Music**\n\n- [{tayloRswift}](https://github.com/asteves/tayloRswift): Colors from all albums up through \"The Tortured Poets Department\"\n- [{beyonce}](https://github.com/dill/beyonce): 130 different palettes from [beyoncepalettes.tumblr.com](https://beyoncepalettes.tumblr.com/)\n- [{rockthemes}](https://github.com/johnmackintosh/rockthemes): Janelle Monae, Muse, No Doubt, Red Hot Chili Peppers, etc.\n- [{popthemes}](https://github.com/johnmackintosh/popthemes): Spice Girls, Aqua, No Doubt, etc.\n\n**National parks**\n\n- [{nationalparkcolors}](https://github.com/katiejolly/nationalparkcolors): Colors from 25 different US national parks\n- [{NatParksPalettes}](https://github.com/kevinsblake/NatParksPalettes): Colors from 30 different US and international national parks\n\n**History**\n\n- [{suffrager}](https://github.com/alburezg/suffrager): Colors from old suffragette posters\n- [{inauguration}](https://github.com/ciannabp/inauguration): Colors from the 2021 presidential inauguration\n- [{ggpomological}](https://github.com/gadenbuie/ggpomological): Colors from old drawings of fruit\n\n**TV and movies**\n\n- [{tvthemes}](https://ryo-n7.github.io/tvthemes/): Colors from a ton of TV shows, including The Simpsons, Parks & Recreation, Spongebob Squarepants, Game of Thrones, etc.\n- [{wesanderson}](https://github.com/karthik/wesanderson): Colors from Wes Anderson movies\n- [{trekcolors}](https://github.com/leonawicz/trekcolors): Colors from Star Trek\n- [{severance}](https://github.com/ivelasq/severance): Colors from the Apple TV show [Severance](https://en.wikipedia.org/wiki/Severance_(TV_series))\n- [{ghibli}](https://github.com/ewenme/ghibli): Colors from Studio Ghibli movies\n- [{harrypotter}](https://github.com/aljrico/harrypotter): Colors from Harry Potter movies\n\n**Other things**\n\n- [{nbapalettes}](https://github.com/murrayjw/nbapalettes): Colors from NBA teams\n- [{LaCroixColoR}](https://github.com/johannesbjork/LaCroixColoR): Colors from La Croix cans\n",
    "supporting": [
      "colors_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}