{
  "hash": "6ddf82d455a813475e109db38f9f518a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 2: Tidy Data and Visualization in R -- PISA\"\ndate: \"2024-08-21\"\noutput: html_document\n---\n\n\n\n# Introduction\n\nIn this lab session, you'll work with a dataset containing information about PISA data. The data comes from the `learningtower` package. Throughout the lab, you will use the following R functions to achieve the final visualization: `filter()`, `group_by()`, `summarise()`, `pivot_longer()`, `mutate()`, `ggplot()`, `aes()`, `geom_line()`, `geom_point()`, `facet_wrap()`, `scale_y_continuous()`, `labs()`, and `theme_minimal()`.\n\n## Description of the Dataset\n\nThe dataset contains the following variables:\n\n-   **year**: Year of the PISA data. Factor.\n-   **country**: Country 3-character code. Note that some regions/territories are coded as country for ease of input. Factor.\n-   **school_id**: The school identification number, unique for each country and year combination. Factor.\n-   **student_id**: The student identification number, unique for each school, country, and year combination. Factor.\n-   **mother_educ**: Highest level of mother's education. Ranges from \"less than ISCED1\" to \"ISCED 3A\". Factor. Note that in 2000, all entries are missing.\n-   **father_educ**: Highest level of father's education. Ranges from \"less than ISCED1\" to \"ISCED 3A\". Factor. Note that in 2000, all entries are missing.\n-   **gender**: Gender of the student. Only \"male\" and \"female\" are recorded. Factor. Note that we call this variable gender and not sex as this term was used in the OECD PISA database.\n-   **computer**: Possession of a computer. Only \"yes\" and \"no\" are recorded. Factor.\n-   **internet**: Access to the internet. Only \"yes\" and \"no\" are recorded. Factor.\n-   **math**: Simulated score in mathematics. Numeric.\n-   **read**: Simulated score in reading. Numeric.\n-   **science**: Simulated score in science. Numeric.\n-   **stu_wgt**: The final survey weight score for the student. Numeric.\n-   **desk**: Possession of a desk to study at. Only \"yes\" and \"no\" are recorded. Factor.\n-   **room**: Possession of a room of your own. Only \"yes\" and \"no\" are recorded. Factor.\n-   **dishwasher**: Possession of a dishwasher. Only \"yes\" and \"no\" are recorded. Factor. Note that in 2015 and 2018, all entries are missing.\n-   **television**: Number of televisions. \"0\", \"1\", \"2\" are coded for no, one, and two TVs in the house. \"3+\" codes for three or more TVs. Factor. Note that in 2003, all entries are missing.\n-   **computer_n**: Number of computers. \"0\", \"1\", \"2\" are coded for no, one, and two computers in the house. \"3+\" codes for three or more computers. Factor. Note that in 2003, all entries are missing.\n-   **car**: Number of cars. \"0\", \"1\", \"2\" are coded for no, one, and two cars in the house. \"3+\" codes for three or more cars. Factor. Note that in 2003, all entries are missing.\n-   **book**: Number of books. Factor. Note that encoding is different in the years 2000 and 2003 compared to all other years. Evaluate `table(student$book, student$year)` for a demo.\n-   **wealth**: Family wealth. Numeric. Note that in 2003, all entries are missing.\n-   **escs**: Index of economic, social, and cultural status. Numeric.\n\n# Exercises\n\n### Exercise 0: Load your package and data\n\nLet's start by loading the tidyverse package and the data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\npisa_df <- read_rds(\"files/data/external_data/pisa_data.rds\")\n```\n:::\n\n\n\n### Exercise 1: Filtering the Data\n\nStart by filtering the dataset to focus on three specific countries: Canada (CAN), the United States (USA), and Mexico (MEX). You can select any country you have. The data uses country 3 character codes. If you don't know your country's iso code, you can find it [here](https://github.com/vincentarelbundock/countrycode/blob/main/dictionary/data_iso.csv).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npisa_df_filtered <- pisa_df |>\n  filter(country %in% c(\"CAN\", \"USA\", \"MEX\"))\n```\n:::\n\n\n\n### Exercise 2: Summarizing the Data\n\nNow that you have filtered the dataset, let's summarize the PISA scores in mathematics, reading, and science for each country by year. Use the `weighted.mean()` function to calculate the weighted average.\n\n#### Why Use Weighting?\n\nIn survey data like PISA, not all students represent the same number of individuals in the population. The stu_wgt variable represents the survey weight, which adjusts for the survey design, non-response, and post-stratification. Applying weights is crucial because it ensures that the results are representative of the broader population. Without weighting, the mean scores could be biased, particularly if certain groups of students (e.g., from specific regions or demographic backgrounds) are over- or under-represented in the sample.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npisa_summary <- pisa_df_filtered |>\n  group_by(year, country) |> \n  summarise(\n    math = weighted.mean(math, stu_wgt, na.rm = TRUE),\n    read = weighted.mean(read, stu_wgt, na.rm = TRUE),\n    science = weighted.mean(science, stu_wgt, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\n\n### Exercise 3: Reshaping the Data (Tidying)\n\n**How Should Our Data Look Like?**\n\nTo create an effective visualization, our data needs to be in a tidy format. Specifically, each row should represent a single observation, and each variable should be in its own column. In this case, instead of having separate columns for each test score (math, read, science), we should have a single column for the test scores and another column that identifies the type of test (e.g., math, read, science). This structure allows us to easily plot the scores across different tests and countries.\n\n**Use `pivot_longer()`**\n\nTo achieve this tidy format, we will use the `pivot_longer()` function to reshape the data. This function takes multiple columns and condenses them into key-value pairs, which results in a longer, more flexible dataset. Assign the new format to the object `pisa_long`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npisa_long <- pisa_summary |> \n  pivot_longer(cols = -c(year, country), values_to = \"score\", names_to = \"test\")\n```\n:::\n\n\n\nAfter running this code, your data will have four key columns: year, country, and test, with the scores in a single column named score. This format is ideal for visualization in ggplot2.\n\n**Question:** How do you think the data should be formatted for effective visualization? Why is the long format preferred in this context?\n\n### Exercise 4: Data Transformation\n\nUse the `mutate()` function to capitalize the test names. This will make the final plot more readable. Re-assign the updated `test` variable to the same object `pisa_long`. **Hint** Look at the `str_to_title()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npisa_long <- pisa_long |>\n  mutate(test = str_to_title(test))\n```\n:::\n\n\n\n### Exercise 5: Creating a Line Plot with Points\n\nIn this exercise, you will create a line plot of the PISA scores over time for each country. Line plots are useful for visualizing trends over time, while adding points helps to emphasize the data at specific time intervals. Create a ggplot object and call it `pisa_plot`.\n\n**Task:** Use `geom_line()` to connect the data points and `geom_point()` to highlight each data point on the plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npisa_plot <- pisa_long |> \n  ggplot(\n    aes(\n      x = year, \n      y = score, \n      group = country, \n      color = country\n    )\n  ) + \n  geom_line() +\n  geom_point()\n\npisa_plot\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-lab-sol_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n**Question:** What is the main issue with this plot?\n\n------------------------------------------------------------------------\n\n### Exercise 6: Adding Facets to the Plot\n\nFaceting allows you to create multiple plots based on the levels of a factor variable. In this case, we will use facets to separate the plots by the type of test (math, read, science). This makes it easier to compare the trends in different test scores.\n\n**Task:** Add `facet_wrap(~ test)` to the plot to create a separate panel for each test.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npisa_plot <- pisa_plot +\n  facet_wrap(~ test)\n\npisa_plot\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-lab-sol_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n### Exercise 7: Customizing Labels and Scales\n\nLabels and scales are essential for making your plot informative and easy to read. In this exercise, you will add labels to the axes and title, and adjust the scale of the y-axis to ensure the plot is correctly displayed.\n\n**Task:** Use the `labs()` function to add labels and titles, and `scale_y_continuous()` to set the limits of the y-axis (**Hint**: Look for the `limits` argument).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npisa_plot <- pisa_plot +\n  scale_y_continuous(limits = c(250, 800)) +\n  labs(\n    x = \"Year\",\n    y = \"Score\",\n    title = \"PISA Scores from 2000 - 2018\",\n    caption = \"Source: OECD\",\n    color = NULL\n  ) +\n  theme_minimal() +  \n  theme(\n    text = element_text(size = 12),\n    legend.position = \"bottom\",\n    axis.text.x = element_text(size = 8)\n  )\n\npisa_plot\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-lab-sol_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## Extra exercises\n\n### Exercise 8: Customizing the Plot\n\nExperiment with different themes and color palettes to make the plot more visually appealing.\n\n### Exercise 9: Adding Context to the Visualization\n\nAdd annotations or text to the plot to highlight significant events or changes in the data.\n\n# Conclusion\n\nBy completing these exercises, you have learned how to filter, summarize, and visualize data in R. You have also gained insights into how different formatting and visualization techniques can impact the interpretation of your data. As you continue to work with data, remember the importance of context and clear communication in your visualizations.\n",
    "supporting": [
      "02-lab-sol_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}