{
  "hash": "8f7feb30a2391e1d2b23a22d5f4cd266",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on: Data Wrangling\"\ndate: \"2024-08-15\"\ndate_end: \"2024-08-15\"\nformat: html\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - dplyr\n    - janitor\n  cell-options:\n    editor-font-scale: 0.7\n    fig-width: 7\n    fig-height: 4.3\n    out-width: \"100%\"\n---\n\n\n\n\n\n\n## Introduction\n\n::: {.callout-note}\n\n[**Posit Cloud project**](https://posit.cloud/content/8531422)\n\n:::\n\nWelcome to the interactive hands-on session on migration data. This session is designed to be an interactive part of our website, allowing you to engage directly with the R code and data manipulation techniques discussed. For your convenience, the same script used here is available in R format within our Posit Cloud project, which you can access [here](https://posit.cloud/content/8531422). You are also welcome to use RStudio or Positron on your local machine to follow along.\n\n## Migration Data\n\nThe data on immigrant and emigrant stocks used in this session is sourced from the United Nations Department of Economic and Social Affairs (UN DESA).\n\n### How does the UN define a migrant?\n\nAccording to the United Nations Population Division, an international migrant is someone who has been living for one year or longer in a country other than the one in which they were born. This definition includes many foreign workers and international students, as well as refugees and, in some cases, their descendants (such as Palestinians born in refugee camps outside of the Palestinian territories). Estimates of unauthorized immigrants living in various countries are also included in these totals.\n\nTourists, foreign-aid workers, temporary workers employed abroad for less than a year, and overseas military personnel are typically not counted as migrants.\n\n## Loading and Cleaning the Data\n\nLet's begin by loading our data using the `read.csv` function:\n\n```{webr-r}\n#| label: load-data\nmigration <- read.csv(\"https://raw.githubusercontent.com/harvard-api209/api209-math-camp/main/files/data/external_data/migration.csv\") |> \n    as_tibble()\n\nmigration  \n```\n\n::: {.callout-warning}\n\n#### Note for Web-R Application Users\n\nIf you're working on your local computer or in Posit Cloud, you can use the `read_csv()` function instead. The `read.csv()` function is used here due to bugs related to the Web-R application.\n:::\n\nWe can use the `glimpse()` function to check our columns (variables). Now, you realize that probably this dataset contains really nasty names. This is what we will usually called as \"raw\" data. \n\n```{webr-r}\n#| label: glimpse\nmigration |> \n    glimpse()\n```\n\nWe'll use the clean_names() function from janitor to standardize column names by converting them to snake_case, which makes them easier to work with.\n\n::: {.callout-warning}\n\n#### This web-r application\n\nThis web-r application already loaded the required package. See at the top of this page. Therefore, remember to load the required packages when you test yourself or use the posit cloud project.\n:::\n\n```{webr-r}\nmigration <- migration |> \n    clean_names()\n\n# and check again the names\nmigration |> \n    glimpse()\n```\n\nThis should be sufficient for the type of names we have.\n\n### Exercise 1\n\n**Part 1:**. Let's focus on a subset of countries in Central America. We want to analyze data\nfrom Nicaragua, El Salvador, Costa Rica, Panama, Guatemala, and Belize, and \nonly consider the years from 1990 to 2020. Test below and select any countries you would like\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nmigration_filtered <- migration |>\n  filter(year >= 1990 & year <= 2020) |> \n  filter(country %in% c(\"\"))\n\nmigration_filtered\n```\n\n## {{< fa lightbulb >}}&ensp;Hint\n\n**Hint:** You'll want to change something in the code that creates `migration_filtered`. \n:::\n\n\n**Part 2**: Summarizing the Data. Now that we have our filtered dataset, let's summarize the data to calculate  the mean number of emigrants by country.\n\n```{webr-r}\nmigration_filtered |>\n    group_by()\n    summarize(name = mean())\n```\n\n::: {.callout-warning}\n\n#### What's the issue with the above code?\n\nHINT: Think about what happens if there are missing values (NA) in the 'emigrants' column.\n\nThe `mean()` function by default includes NA values, which will return NA as the result if any NA values are present. We need to handle missing values properly.\n:::\n\nTry below and correct the code:\n\n```{webr-r}\nmigration_filtered |>\n    group_by()\n    summarize(name = mean(, another argument here))\n```\n\n**Part 3**: Add the summarize function more stats: such as observations, min year, and max year. \n\n```{webr-r}\nmigration_filtered |> \n  group_by(country) |> \n  summarize(\n    mean_emigrants = mean(emigrants, na.rm = TRUE),\n    n_observations = n(),\n    min_year = min(year),\n    max_year = max(year)\n  )\n```\n\n::: {.callout-warning}\n\n#### Exercise: What could be wrong with this approach?\n\nHINT: Are all the observations being used in the calculation? What about years with missing data?\n:::\n\n**Part 4**: Identifying Missing Data\n\nLet's investigate how many missing values exist for each country in the 'emigrants' variable.\nThis will help us understand how missing data might affect our summary statistics.\n\n```{webr-r}\nmigration_filtered |> \n  group_by(country) |> \n  summarize(\n    n_missing = sum(is.na(emigrants)),\n    n_observations = n(),\n    missing_rate = n_missing / n_observations\n  )\n```\n\nHere, we're counting the number of missing values (n_missing) for each country,\nand calculating the proportion of missing data (missing_rate).\n\n**Part 5**: Re-doing the Summary with Improved Understanding\n\nNow, let's improve our summary by accounting for missing values. We'll calculate the mean only where data is available, and ensure that our count of observations reflects only those used in the mean calculation.\n\n```{webr-r}\nmigration_filtered |> \n  group_by(country) |> \n  summarize(\n    mean_emigrants = mean(emigrants, na.rm = TRUE),\n    n_observations = sum(!is.na(emigrants)),  # Counts only non-missing values\n    min_year = min(year[!is.na(emigrants)]),  # Finds the earliest year with data\n    max_year = max(year[!is.na(emigrants)])   # Finds the latest year with data\n  )\n```\n\n**Part 6**: Simplifying the Process\n\nTo avoid handling missing data in multiple steps, we can filter out the missing values\nbefore grouping and summarizing. This ensures our calculations are straightforward and accurate. Test it in the chunk below\n\n```{webr-r}\nmigration_filtered |> \n  filter() |>        \n  group_by(country) |> \n  summarize(\n    mean_emigrants = mean(),  \n    n_observations = n(),     \n    min_year = min(),         \n    max_year = max()          \n  )\n```\n\n### Exercise 2\n\nIn this exercise, we will explore how to summarize multiple variables at once\nusing the `across()` function. We will start with a simple example and gradually\nbuild up to more complex summaries, including calculating multiple statistics \n(mean, standard deviation, etc.). Finally, we'll create a function to automate \nthis process for any set of variables.\n\n**Part 1**: Selecting Relevant Variables\n\nSuppose we want to analyze multiple columns: `emigrants`, and `international_migrants`.\nLet's start by selecting these variables.\n\n```{webr-r}\nmigration_filtered |> \n  select(year, country, VAR1, VAR2)\n```\n\n**Part 2:** Summarizing Multiple Variables\n\nWe want to calculate the mean of both `emigrants` and `international_migrants` \nfor each country. Let's use the `across()` function to do this.\n\n```{webr-r}\nmigration_filtered |> \n  group_by(country) |> \n  select(year, country, emigrants, international_migrants) |> \n  summarize(\n    across(\n      c(emigrants, international_migrants), \n      mean,\n      .names = \"mean_{.col}\"\n    )\n  )\n```\n\n::: {.callout-warning}\n\n#### Warning\n\nWhat issue might arise with the above code?\nHINT: Think about how missing values (`NA`) are handled in the `mean()` function.\n\nExplanation:\nAs in the previous exercise, the mean calculation will return `NA` if there are \nany missing values. We need to handle these missing values properly.\n\n:::\n\n**Part 3**: Handling Missing Values\n\nLet's modify the code to remove the missing values before calculating the mean.\n\n```{webr-r}\nmigration_filtered |> \n  group_by(country) |> \n  select(year, country, emigrants, international_migrants) |> \n  summarize(\n    across(\n      c(emigrants, international_migrants), \n      ~mean(.x, na.rm = TRUE), \n      .names = \"mean_{.col}\"\n    )\n  )\n```\n\n**Part 4**: Calculating Multiple Statistics\n\nWhat if we want to calculate additional statistics, such as the standard deviation?\nWe can use the `list()` function within `across()` to calculate both the mean \nand standard deviation.\n\n```{webr-r}\nmigration_filtered |> \n  group_by(country) |> \n  select(year, country, emigrants, international_migrants) |> \n  summarize(\n    across(\n      c(emigrants, international_migrants), \n      list(\n        mean = ~mean(.x, na.rm = TRUE), \n        sd = ~sd(.x, na.rm = TRUE)\n      ), \n    .names = \"{.fn}_{.col}\")\n  )\n```\n\n**Part 5 (HARD)**: Creating a Function \n\nLet's create a more advanced exercise. What if we want to automate this process \nso that we can apply it to any set of variables? We'll create a function that \ntakes two arguments: the dataset we want to analyze and the set of variables \nwe want to summarize.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nsummarize_migration_data <- function(data, group_var, summary_vars) {\n  data |> \n    group_by(across(all_of(group_var))) |> \n    summarize(\n      across(\n      )\n    ) |> \n    pivot_longer() |> \n    pivot_wider()\n}\n\n```\n\n## {{< fa lightbulb >}}&ensp;Hint\n\n**Hint:** When creating the `summarize_migration_data` function, start by understanding that the purpose is to summarize several variables based on a grouping variable, such as a country. You’ll need to define parameters for the dataset (`data`), the grouping variable (`group_var`), and the variables you want to summarize (`summary_vars`).\n\nTo group the data by the specified variable, use `group_by()`. This should be done with `across(all_of(group_var))` to ensure the grouping works dynamically with the variable(s) passed to the function.\n\nNext, you’ll summarize the data using `summarize()` and `across()`. Within `across()`, apply a list of functions to calculate the number of observations (`n`), mean, standard deviation (`sd`), minimum (`min`), and maximum (`max`). It's important to handle missing values using `na.rm = TRUE` for the mean, standard deviation, minimum, and maximum calculations to avoid issues with missing data.\n\nAfter calculating the summaries, you’ll need to reshape the data for better readability. Use `pivot_longer()` to transform the summarized data into a long format, where each row represents a combination of a statistic and a variable. Then, use `pivot_wider()` to pivot the data back into a wide format, with each statistic as a column. This step helps in organizing the results in a structured manner.\n\nThroughout this process, pay attention to how you name the output columns in the `summarize()` step. The `.names` argument in `across()` should be set up to clearly label each statistic with both the function and the variable names, ensuring clarity in the final output.\n\nFinally, ensure that your function is flexible enough to be applied to different datasets and variables by testing it with various inputs. This will confirm that it performs as expected across different scenarios.\n\n:::\n\nLet's test the function:\n\n```{webr-r}\nmigration_filtered |>\n  rename(immigrants = international_migrants) |> \n  summarize_migration_data(\n    group_var = \"country\",\n    summary_vars = c(\"emigrants\", \"immigrants\")\n  )\n```\n",
    "supporting": [
      "hands-on_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}