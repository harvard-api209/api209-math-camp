{
  "hash": "5c761b5093521bddd1055e2e76de5a42",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-On Session: Math Camp Recap\"\nauthor: \"Rony Rodriguez-Ramirez\"\ndate: \"2024-09-04\"\n---\n\n\n\nIn this detailed hands-on session, we will walk through some fundamental data manipulation tasks in R using the **`starwars`** dataset from the `dplyr` package, covering essential functions for summarizing, filtering, arranging, and visualizing data. Throughout the session, we will practice different ways to compute summary statistics, filter data, and generate plots, focusing on applying both base R and tidyverse syntax. The goal is to consolidate what you learned during Math Camp while expanding on the key techniques for data analysis.\n\nWe start by loading the necessary libraries, specifically `tidyverse`, which offers a collection of R packages designed for data science. This package will allow us to manipulate and visualize data in a clear and concise manner.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n \nNext, Let's calculate the **total height** of all characters in the dataset. We use the base R function `sum` to compute the sum of the `height` variable. This calculation includes the `na.rm = TRUE` argument to exclude missing values from the summation. Don't worry thinking whether there is an intrinsic meaning or not to the output. We are doing this just for instructional purposes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal_height <- sum(starwars$height, na.rm = TRUE)\ntotal_height\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14143\n```\n\n\n:::\n:::\n\n\n\nAfter obtaining the total height, we move to calculating the **average height** using the base R function `mean`. Again, the `na.rm = TRUE` argument ensures that missing values do not affect the calculation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\navg_height <- mean(starwars$height, na.rm = TRUE)\navg_height\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 174.6049\n```\n\n\n:::\n:::\n\n\n\nNow, we introduce the `tidyverse` syntax to achieve the same result, using the `summarize` function within a pipeline to calculate the **average height**. This approach is more readable and scalable for complex operations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |> \n  summarize(\n    avg_height = mean(height, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  avg_height\n       <dbl>\n1       175.\n```\n\n\n:::\n:::\n\n\n\nNext, let's compute the **Body Mass Index (BMI)** for each character by applying a transformation to the data. We use the `mutate` function to create a new variable, `bmi`, which is derived from the `mass` and `height` variables. Then, we select the characters' names and their respective BMI values for display.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars <- starwars |> \n  mutate(bmi = mass / (height / 100)^2)\n\nstarwars |> \n  select(name, bmi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 2\n   name                 bmi\n   <chr>              <dbl>\n 1 Luke Skywalker      26.0\n 2 C-3PO               26.9\n 3 R2-D2               34.7\n 4 Darth Vader         33.3\n 5 Leia Organa         21.8\n 6 Owen Lars           37.9\n 7 Beru Whitesun Lars  27.5\n 8 R5-D4               34.0\n 9 Biggs Darklighter   25.1\n10 Obi-Wan Kenobi      23.2\n# ℹ 77 more rows\n```\n\n\n:::\n:::\n\n\n\nWe can filter the dataset to identify **tall characters** whose height exceeds 200 cm. The `filter` function allows us to subset the data based on this condition.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntall_characters <- starwars |> \n  filter(height > 200)\n\ntall_characters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 15\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 2 Chewbac…    228   112 brown      unknown    blue           200   male  mascu…\n 3 Roos Ta…    224    82 none       grey       orange          NA   male  mascu…\n 4 Rugor N…    206    NA none       green      orange          NA   male  mascu…\n 5 Yarael …    264    NA none       white      yellow          NA   male  mascu…\n 6 Lama Su     229    88 none       grey       black           NA   male  mascu…\n 7 Taun We     213    NA none       grey       black           NA   fema… femin…\n 8 Grievous    216   159 none       brown, wh… green, y…       NA   male  mascu…\n 9 Tarfful     234   136 brown      brown      blue            NA   male  mascu…\n10 Tion Me…    206    80 none       grey       black           NA   male  mascu…\n# ℹ 6 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>, bmi <dbl>\n```\n\n\n:::\n:::\n\n\n\nOnce we have the subset of tall characters, we sort them in descending order of height using the `arrange` function, and then display only their names and heights. The `desc` function ensures that the tallest characters appear at the top.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntall_characters |> \n  arrange(desc(height)) |> \n  select(name, height)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   name         height\n   <chr>         <int>\n 1 Yarael Poof     264\n 2 Tarfful         234\n 3 Lama Su         229\n 4 Chewbacca       228\n 5 Roos Tarpals    224\n 6 Grievous        216\n 7 Taun We         213\n 8 Rugor Nass      206\n 9 Tion Medon      206\n10 Darth Vader     202\n```\n\n\n:::\n:::\n\n\n\nWe then perform **grouping and summarizing** to calculate the average height for each species in the dataset. The `group_by` function groups the data by species, and `summarise` computes the average height within each group.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\navg_height <- starwars |> \n  group_by(species) |> \n  summarise(\n    avg_height = mean(height, na.rm = TRUE)\n  )\n\navg_height\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 38 × 2\n   species   avg_height\n   <chr>          <dbl>\n 1 Aleena           79 \n 2 Besalisk        198 \n 3 Cerean          198 \n 4 Chagrian        196 \n 5 Clawdite        168 \n 6 Droid           131.\n 7 Dug             112 \n 8 Ewok             88 \n 9 Geonosian       183 \n10 Gungan          209.\n# ℹ 28 more rows\n```\n\n\n:::\n:::\n\n\n\nIn another example, we use `group_by` and `mutate` to create a new column `mean_grouped`, which stores the average height for each species directly within the dataset. This doesn't modify the *level* of the dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |> \n  group_by(species) |> \n  mutate(\n    mean_grouped = mean(height, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 16\n# Groups:   species [38]\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 <NA>       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 7 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>, bmi <dbl>, mean_grouped <dbl>\n```\n\n\n:::\n:::\n\n\n\nTo find the **tallest species**, we can arrange the summarized dataset by average height in descending order, extract the top entry, and use the `pull` function to display only the species name.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\navg_height |> \n  arrange(desc(avg_height)) |> \n  head(1) |> \n  pull(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Quermian\"\n```\n\n\n:::\n:::\n\n\n\nFinally, let's use **ggplot2** for visualization. First, we create a bar chart to display the tallest characters by height. The `ggplot` function initializes the plot, and `geom_col` adds the bars, with black borders and gray fill. We also use `labs` to label the axes and add a title to the plot, and `theme_minimal` to apply a clean, minimalistic theme.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntall_characters |> \n  ggplot(\n    aes(\n      x = height,\n      y = name\n    )\n  ) + \n  geom_col(color = \"black\", fill = \"grey\") +\n  labs(\n    x = \"Height\",\n    y = NULL, \n    title = \"Tallest characters in Starwars\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](hands-on_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nIn another visualization, we reorder the character names by height using `fct_reorder` from the `forcats` package, ensuring that the tallest characters are displayed at the top of the plot. The structure is similar to the previous plot, but here we include reordering to enhance clarity.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntall_characters |> \n  mutate(name = fct_reorder(name, height)) |> \n  ggplot(\n    aes(\n      x = height,\n      y = name\n    )\n  ) +\n  geom_col(color = \"black\", fill = \"grey\") +\n  labs(title = \"Top 10 tallest characters in this dataset\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](hands-on_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nAll the best with your first Problem Set!\n",
    "supporting": [
      "hands-on_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}