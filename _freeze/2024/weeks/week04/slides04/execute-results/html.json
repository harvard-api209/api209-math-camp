{
  "hash": "e74483a4ec87a7f335f023fafd4d78e6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"<font style='font-size:1em;'>Week 04<br/>RECAP & Quarto</font>\"\nsubtitle: \"API209: Summer Math Camp\"\nformat: \n  clean-api-revealjs:\n    highlight-style: breeze\n    transition: fade\nauthor:\n  - name: Rony Rodrigo Maximiliano Rodriguez-Ramirez\n    email: rrodriguezramirez@g.harvard.edu\n    affiliations: \"Harvard University\"\ndate: last-modified\nengine: knitr\nfilters:\n  - naquiz\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n  \n# RECAP\n\n## First week!\n\n<center>\n![](img/meme.jpg)\n</center>\n\n## From the top! \n\n* I am aiming to cover the *essentials.* \n  - Recap about *essential* functions. (1 hour)\n  - Recap about *Quarto* document. (1 hour)\n  - Q&A (Rest of the session)\n\n## Checklist\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#C90016;overflow:visible;position:relative;\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`{=html} R installed?\n\n     Current version 4.4.1\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#C90016;overflow:visible;position:relative;\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`{=html} RStudio installed?\n\n     I'm on RStudio 2024.04.2+764 -- This one has Quarto already installed.\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#C90016;overflow:visible;position:relative;\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`{=html} Have these packages?\n\n     `tidyverse`. For the PSet, you may use the `sf` package for maps.\n\n## Full Hands-on\n\n- Today, we are going 1 by 1. \n- I am going to present you with direct tips (and, maybe, hints) and; \n- We are going to organize our scripts and/or quarto documents at the same time.\n\n## Tips for the Recap Session\n\n- Follow along: Try running the code as we go through each example.\n- Ask questions: There’s no such thing as a bad question—this is a learning space!\n- Take notes: Writing down key points will help solidify your understanding.\n\n## Loading Packages and Data\n\n- What do we do first?\n- We, *always*, begin by loading the necessary packages. \n- For this set of exercises, we are going to use the starwars dataset. \n- It should be already preloaded since it is part of the tidyverse package.\n\n## Loading packages and data\n\nSo our first chunk (or lines of code) should look like this:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_3adb5137\" data-warn-when=\"5\" data-update-every=\"1\" data-blink-colon=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">00</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">30</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n. . .\n\nWe can call the `starwars` dataset by its name. \n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 <NA>       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\n\nYou know already some functions to check the data. \n\n## Which option would get the you total height?\n\n:::::{.question}\n\n::::{.choices}\n\n:::{.choice}\n`sum(var)`\n:::  \n\n:::{.choice .correct-choice}\n`sum(dataset$var, na.rm = TRUE`)\n:::\n\n:::{.choice}\n`starwars |> sum(height)`\n:::\n\n:::{.choice}\n`starwars |> sum(height, na.rm = TRUE)` \n:::\n\n::::\n:::::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_334436c2\" data-warn-when=\"5\" data-update-every=\"1\" data-blink-colon=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">00</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">30</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Similarly, which option would get you the average height?\n\n:::::{.question}\n\n::::{.choices}\n\n:::{.choice}\n`mean(var)`\n:::  \n\n:::{.choice .correct-choice}\n`mean(dataset$var, na.rm = TRUE`)\n:::\n\n:::{.choice}\n`starwars |> mean(height)`\n:::\n\n:::{.choice}\n`starwars |> mean(height, na.rm = TRUE)` \n:::\n\n::::\n:::::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_047819c7\" data-warn-when=\"5\" data-update-every=\"1\" data-blink-colon=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">00</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">30</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Summing Values\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sum of height for all characters\ntotal_height <- sum(starwars$height, na.rm = TRUE)\ntotal_height\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14143\n```\n\n\n:::\n:::\n\n\n\n- We use the `sum()` function to calculate the total height of all characters in the dataset. The `na.rm = TRUE` option ensures missing values are ignored.\n- Notice that in this case I am assigning (`<-`) the result to an object.\n\n. . .\n\nIn this specific exercise, we don't really care about the result since there is no actual meaning. \n\n---\n\n## Creating New Variables \n\nWhat do we use if we want to create new variables?\n\n. . .\n\n`mutate`. Let's use `mass` and `height` from the dataset to create a `bmi` variable. You can google the formula if you don't know how to estimate the bmi.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_0689b3cb\" data-warn-when=\"5\" data-update-every=\"1\" data-blink-colon=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">30</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars <- starwars |> \n  mutate(bmi = mass / (height / 100)^2)\n```\n:::\n\n\n\nUsing `mutate()`, we create a new column `bmi`, which calculates the Body Mass Index (BMI) for each character based on their mass and height.\n\n---\n\n## Subseting our data\n\nWhich function we use to subset our dataset (from the `tidyverse` package)?\n\n. . .\n\n- `filter` \n- Imaging that you would like to get only the characters that are tall (i.e., > 200). How do we do it? Assign it to the object `tall_characters`.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_c0b22769\" data-warn-when=\"5\" data-update-every=\"1\" data-blink-colon=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">30</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter characters with height greater than 200\ntall_characters <- starwars |> \n  filter(height > 200)\ntall_characters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 15\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 2 Chewbac…    228   112 brown      unknown    blue           200   male  mascu…\n 3 Roos Ta…    224    82 none       grey       orange          NA   male  mascu…\n 4 Rugor N…    206    NA none       green      orange          NA   male  mascu…\n 5 Yarael …    264    NA none       white      yellow          NA   male  mascu…\n 6 Lama Su     229    88 none       grey       black           NA   male  mascu…\n 7 Taun We     213    NA none       grey       black           NA   fema… femin…\n 8 Grievous    216   159 none       brown, wh… green, y…       NA   male  mascu…\n 9 Tarfful     234   136 brown      brown      blue            NA   male  mascu…\n10 Tion Me…    206    80 none       grey       black           NA   male  mascu…\n# ℹ 6 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>, bmi <dbl>\n```\n\n\n:::\n:::\n\n\n\nThe `filter()` function is used to select characters whose height is greater than 200 cm.\n\n## Sorting\n\nUse the same object, i.e., `tall_characters` to sort the characters. Number 1 should be the tallest chracter.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_f940822f\" data-warn-when=\"5\" data-update-every=\"1\" data-blink-colon=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">30</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntall_characters |> \n  arrange(desc(height)) |> \n  select(name, height)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   name         height\n   <chr>         <int>\n 1 Yarael Poof     264\n 2 Tarfful         234\n 3 Lama Su         229\n 4 Chewbacca       228\n 5 Roos Tarpals    224\n 6 Grievous        216\n 7 Taun We         213\n 8 Rugor Nass      206\n 9 Tion Medon      206\n10 Darth Vader     202\n```\n\n\n:::\n:::\n\n\n\n. . .\n\nExtra optional question: \n\nWhat's the difference between `select` and `filter`?\n\n## Grouping and Summarizing Data\n\nNow, imagine we would like to know the average height by species in this universe. How do we do it?\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_ccb925b4\" data-warn-when=\"5\" data-update-every=\"1\" data-blink-colon=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">30</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Think in steps.\navg_height <- starwars |> \n  func(___) |> \n  func(___ = ___(___, na.rm = TRUE))\n\navg_height\n```\n:::\n\n\n\n## Grouping and Summarizing Data\n\nNow, imagine we would like to know the average height by species in this universe. How do we do it?\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group by species and summarize average height\navg_height <- starwars |> \n  group_by(species) |> \n  summarise(avg_height = mean(height, na.rm = TRUE))\navg_height\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 38 × 2\n   species   avg_height\n   <chr>          <dbl>\n 1 Aleena           79 \n 2 Besalisk        198 \n 3 Cerean          198 \n 4 Chagrian        196 \n 5 Clawdite        168 \n 6 Droid           131.\n 7 Dug             112 \n 8 Ewok             88 \n 9 Geonosian       183 \n10 Gungan          209.\n# ℹ 28 more rows\n```\n\n\n:::\n:::\n\n\n\n## Which spicies has the largest average height?\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_db280611\" data-warn-when=\"5\" data-update-every=\"1\" data-blink-colon=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">30</span></code>\n</div>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\navg_height |> \n  arrange(desc(avg_height)) |> \n  head(1) |> \n  pull(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Quermian\"\n```\n\n\n:::\n:::\n\n\n\n\n## The Quermian\n\n<center>\n![](https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/c6c29bd6-d988-4414-94da-81adb5898a8b/d482x31-342ae217-4fde-4600-ac57-bf6f0b761d86.jpg/v1/fill/w_761,h_1050,q_70,strp/xexto_and_quermian_by_ryan_rhodes_d482x31-pre.jpg?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7ImhlaWdodCI6Ijw9MTI0MiIsInBhdGgiOiJcL2ZcL2M2YzI5YmQ2LWQ5ODgtNDQxNC05NGRhLTgxYWRiNTg5OGE4YlwvZDQ4MngzMS0zNDJhZTIxNy00ZmRlLTQ2MDAtYWM1Ny1iZjZmMGI3NjFkODYuanBnIiwid2lkdGgiOiI8PTkwMCJ9XV0sImF1ZCI6WyJ1cm46c2VydmljZTppbWFnZS5vcGVyYXRpb25zIl19.-W9KfQH5COQFuMuGoNkFhooY5KDrfsvkSMrZbnYldsw){width=500}\n</center>\n\n\n## Visualization with `ggplot2`\n\nLet's visualize the tallest characters. use the object `tall_characters` to create a plot of the character name (categorical, y axis) vs their height (x axis).\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_e2c721ef\" data-update-every=\"1\" data-blink-colon=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n. . .\n\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\ntall_characters |> \n  ggplot(\n    aes(\n      x = height,\n      y = name\n    )\n  ) +\n  geom_col(color = \"black\", fill = \"grey\") +\n  labs(title = \"Top 10 tallest characters in this dataset\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](slides04_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n\n## How do we arrange the plot? \n\nYou can use google. Hint: `factor()`\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_2cbab53d\" data-update-every=\"1\" data-blink-colon=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\ntall_characters |> \n  arrange(height) |> \n  mutate(name = factor(name, levels = name)) |> \n  ggplot(\n    aes(\n      x = height,\n      y = name\n    )\n  ) +\n  geom_col(color = \"black\", fill = \"grey\") +\n  labs(title = \"Top 10 tallest characters in this dataset\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](slides04_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n\n# Quarto\n\n## Quarto Tip 1: Always Render Your Document\n\n- **Render frequently**: Make sure to render your Quarto document often to catch issues early.\n- Use the **Render button** in RStudio or type `Ctrl + Shift + K` on your keyboard. `Cmd + Shift + K` on Mac.\n- Rendering ensures your code works and produces the correct output before you submit or share your document.\n\n## Quarto Tip 2: Loading Packages Correctly\n\n- **Load your packages at the top of the document**. This makes sure that all the functions you need are available when you run your code.\n  \nExample:\n\n```r\nlibrary(tidyverse)\n```\n\n- If a package isn’t loaded, the functions from that package won’t work, leading to errors in your document.\n\n\n## Quarto Tip 3: Code and Answer Boxes\n\n- In your problem set, you'll often see two boxes:\n  - **Your code here**: This is where you’ll write and run your R code.\n  - **Your answer here**: This is where you’ll explain your results or interpretations in plain text.\n  \nExample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here\nstarwars |> \n  select(name, height)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 2\n   name               height\n   <chr>               <int>\n 1 Luke Skywalker        172\n 2 C-3PO                 167\n 3 R2-D2                  96\n 4 Darth Vader           202\n 5 Leia Organa           150\n 6 Owen Lars             178\n 7 Beru Whitesun Lars    165\n 8 R5-D4                  97\n 9 Biggs Darklighter     183\n10 Obi-Wan Kenobi        182\n# ℹ 77 more rows\n```\n\n\n:::\n:::\n\n\n\n## Quarto Tip 4: Using the Visual Editor\n\n- Quarto provides a **visual editor** to make writing markdown easier. \n- You can access it by clicking the **Visual** button at the top of your document.\n- The visual editor helps format your text, add headings, lists, and code chunks without needing to remember the exact markdown syntax.\n\n# That's it! Good Luck!\n\n",
    "supporting": [
      "slides04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}